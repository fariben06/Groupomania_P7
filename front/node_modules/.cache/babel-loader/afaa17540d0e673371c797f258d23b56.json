{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fd-Formation\\\\Desktop\\\\Groupomania\\\\front\\\\src\\\\components\\\\Profile\\\\Profile.js\";\n// Importer les composants nécessaires à la page d'accueil (Home)\nimport React from 'react'; // Importer React pour utiliser les fonctionnalités de React JS\n\nimport axios from 'axios'; // Importer axios pour utiliser les fonctionnalités de axios  pour les requêtes HTTP\n\nimport App from \"../App\"; // Importer le composant App pour récupérer les données de l'utilisateur connecté\n\nimport Avatar from '../Avatar/Avatar'; // Importer le composant Avatar pour afficher l'avatar de l'utilisateur connecté\n// Créer la classe Profile pour afficher le profil de l'utilisateur connecté \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class Profile extends React.Component {\n  constructor(props) {\n    // Constructeur de la classe Profile (récupération des données de l'utilisateur connecté)\n    super(props); // Appel du constructeur de la classe parente (React) \n\n    this.state = {\n      // Définition des variables de la classe Profile  \n      userLogged: props.userLogged,\n      // Utilisateur connecté (récupéré dans le composant App)  \n      tasksList: props.tasksList,\n      // Liste des tâches (récupéré dans le composant App) - Liste des tâches de l'utilisateur connecté\n      // Formulaires des inputs [Nom, Prénom, Email, Mot de passe, Avatar]\n      inputValid: [true, true, true, true, true],\n      validForm: true,\n      valueFirstname: props.userLogged.firstname,\n      valueLastname: props.userLogged.lastname,\n      valueEmail: props.userLogged.email,\n      valuePassword: null,\n      fileAvatar: null,\n      // Tâche courante (tâche courante de l'utilisateur connecté) et position de la tâche dans la liste des tâches.\n      curTaskId: props.userLogged.task.id,\n      // Id de la tâche courante de l'utilisateur connecté\n      curTask: props.userLogged.task.tasks,\n      // Tâche courante de l'utilisateur connecté (récupéré dans le composant App)\n      curPosTask: null\n    }; // Récupération de l'url de l'API pour les requêtes HTTP \n\n    this.userUrl = 'http://localhost:8080/api/user'; // Url de l'API pour les requêtes HTTP  pour les utilisateurs\n\n    this.taskUrl = 'http://localhost:8080/api/tasks'; // Url de l'API pour les requêtes HTTP  pour les tâches de l'utilisateur connecté\n\n    this.OnSubmit = this.OnSubmit.bind(this); // Gestion d'envoi (bind) de la fonction OnSubmit \n\n    this.OnChange = this.OnChange.bind(this); // Gestion des events (bind) de la fonction OnChange\n\n    this.deleteAvatar = this.deleteAvatar.bind(this); // Suppression de l'avatar de l'utilisateur connecté  \n\n    this.delete = this.delete.bind(this); // Suppression de l'utilisateur connecté\n\n    this.OnClickTask = this.OnClickTask.bind(this); // Gestion du clic sur une tâche de la liste des tâches de l'utilisateur connecté\n  } // Gestion d'envoi des données de l'utilisateur connecté, modification de son profil et récupération de la liste des tâches de l'utilisateur connecté.\n\n\n  async OnSubmit(event) {\n    const {\n      userLogged,\n      valueFirstname,\n      valueLastname,\n      valueEmail,\n      valuePassword,\n      fileAvatar,\n      curTaskId\n    } = this.state; // L'objet contient des formes de valeurs pour les données de l'utilisateur connecté et des données de la tâche courante.\n\n    const formData = new FormData(); // Création d'un objet FormData pour les données de l'utilisateur connecté\n\n    formData.append(\"userId\", userLogged.id); // Ajout de l'id de l'utilisateur connecté à l'objet FormData  \n\n    formData.append(\"firstname\", valueFirstname); // Ajout du prénom de l'utilisateur connecté à l'objet FormData\n\n    formData.append(\"lastname\", valueLastname); // Ajout du nom de l'utilisateur connecté à l'objet FormData\n\n    formData.append(\"taskId\", curTaskId); // Ajout de l'id de la tâche courante à l'objet FormData  \n\n    formData.append(\"email\", valueEmail); // Ajout de l'email de l'utilisateur connecté à l'objet FormData \n    // Si le mot de passe est renseigné, alors on ajoute le mot de passe à l'objet FormData  sinon on ne fait rien (pas de modification du mot de passe)\n\n    if (valuePassword != null) formData.append(\"password\", valuePassword); // Si l'avatar est renseigné, alors on ajoute l'avatar à l'objet FormData  sinon on ne fait rien (pas de modification de l'avatar)\n\n    if (fileAvatar != null) formData.append(\"avatar\", fileAvatar);\n    event.preventDefault(); // Envoi de la requête HTTP pour la modification du profil de l'utilisateur connecté \n    // et récupération de la liste des tâches de l'utilisateur connecté  avec axios et la méthode PUT\n\n    await axios.put(this.userUrl + '/' + userLogged.id + '/' + 0, formData, {\n      headers: {\n        // Ajout des headers à la requête HTTP pour la modification du profil de l'utilisateur connecté\n        Authorization: \"Bearer \" + sessionStorage.getItem(\"token\") // Ajout du token d'authentification à la requête HTTP pour la modification du profil de l'utilisateur connecté\n\n      }\n    }).then(() => App.ReloadApp()).catch(error => {\n      // Gestion des erreurs.\n      console.error('Error Edit Avatar!'); // Affichage d'un message d'erreur si la modification du profil de l'utilisateur connecté a échoué \n\n      console.warn(error); // Affichage d'un message d'erreur en cas d'erreur de réponse de l'API \n    });\n  } // Gestion des events.\n\n\n  OnChange(event) {\n    const myCase = event.target.name;\n\n    switch (myCase) {\n      case 'firstname':\n        this.checkForm(event.target);\n        this.setState({\n          valueFirstname: event.target.value\n        });\n        break;\n\n      case 'lastname':\n        this.checkForm(event.target);\n        this.setState({\n          valueLastname: event.target.value\n        });\n        break;\n\n      case 'email':\n        this.checkForm(event.target);\n        this.setState({\n          valueEmail: event.target.value\n        });\n        break;\n\n      case 'password':\n        this.checkForm(event.target);\n        this.setState({\n          valuePassword: event.target.value\n        });\n        break;\n\n      case 'avatar':\n        this.checkForm(event.target);\n        this.setState({\n          fileAvatar: event.target.files[0]\n        });\n        break;\n\n      default:\n        console.error('Nothing here!');\n        break;\n    }\n  } // Contrôle des champs de formulaire.\n\n\n  checkForm(target) {\n    const {\n      inputValid\n    } = this.state;\n    const inputName = target.name;\n    let inputs = [...inputValid];\n    let pos = 0;\n\n    switch (inputName) {\n      default:\n        console.error('Unknown field name!');\n        break;\n\n      case 'firstname':\n      case 'lastname':\n        if (inputName === 'lastname') pos = 1;\n\n        if (target.value.length >= 2) {\n          // Change style\n          target.className = \"valid\";\n          inputs[pos] = true;\n          this.setState({\n            inputValid: inputs\n          });\n        } else {\n          // Change style\n          target.className = \"error\";\n          inputs[pos] = false;\n          this.setState({\n            inputValid: inputs\n          });\n        }\n\n        break;\n\n      case 'email':\n        let regEmail = new RegExp(/^[a-zA-Z0-9.-]+@[a-zA-Z0-9.-]+(\\.[a-zA-Z]{2,})/g);\n        pos = 2;\n\n        if (!target.value.match(regEmail)) {\n          // Change style\n          target.className = \"error\";\n          inputs[pos] = false;\n          this.setState({\n            inputValid: inputs\n          });\n        } else {\n          // Change style\n          target.className = \"valid\";\n          inputs[pos] = true;\n          this.setState({\n            inputValid: inputs\n          });\n        }\n\n        break;\n\n      case 'password':\n        pos = 3;\n\n        if (target.value.length >= 4) {\n          // Change style\n          target.className = \"valid\";\n          inputs[pos] = true;\n          this.setState({\n            inputValid: inputs\n          });\n        } else {\n          // Change style\n          target.className = \"error\";\n          inputs[pos] = false;\n          this.setState({\n            inputValid: inputs\n          });\n        }\n\n        if (target.value.length === 0) {\n          // Change style\n          target.className = \"\";\n          inputs[pos] = true;\n          this.setState({\n            inputValid: inputs\n          });\n        }\n\n        ;\n        break;\n\n      case 'avatar':\n        pos = 4;\n\n        if (target.value) {\n          // Change style\n          target.className = \"valid\";\n          inputs[pos] = true;\n          this.setState({\n            inputValid: inputs\n          });\n        } else {\n          // Change style\n          target.className = \"\";\n          inputs[pos] = false;\n          this.setState({\n            inputValid: inputs\n          });\n        }\n\n        ;\n        break;\n    }\n\n    if (inputs.every(element => element === true)) this.setState({\n      validForm: false\n    });else this.setState({\n      validForm: true\n    });\n  } // Modification de la tâche courante (click sur une tâche) et récupération de la position de la tâche dans la liste des tâches.\n\n\n  async OnClickTask(event) {\n    const {\n      tasksList,\n      curPosTask,\n      userLogged\n    } = this.state;\n    let posTask = curPosTask + 1;\n    if (!curPosTask) posTask = 1;\n    if (posTask >= tasksList.length) posTask = 0;\n    tasksList.forEach((task, index) => {\n      if (posTask === index) {\n        if (task.id === userLogged.task.id) {\n          event.target.className = \"\";\n          this.setState({\n            validForm: true\n          });\n        } else {\n          event.target.className = \"valid\";\n          this.setState({\n            validForm: false\n          });\n        }\n\n        this.setState({\n          curPosTask: posTask,\n          curTaskId: tasksList[posTask].id,\n          curTask: tasksList[posTask].tasks\n        });\n      }\n    });\n  } // Suppression de l'avatar de l'utilisateur (Avatar par défaut) et réinitialisation du champ input.  \n\n\n  async deleteAvatar() {\n    const {\n      userLogged\n    } = this.state;\n\n    if (window.confirm('Votre avatar est sur le point d\\'être supprimer...\\nÊtes vous sûre ?')) {\n      // Supprimer la demande de l'utilisateur (avatar par défaut) et réinitialiser le champ input.\n      await axios.delete(this.userUrl + '/' + userLogged.id + '/' + 1, {\n        headers: {\n          // Envoyer le token dans les headers de la requête pour authentifier l'utilisateur (sécurité).\n          Authorization: \"Bearer \" + sessionStorage.getItem(\"token\")\n        }\n      }).then(() => App.ReloadApp()); // Recharger l'application pour mettre à jour l'avatar de l'utilisateur.\n    }\n  } // Suppression du compte de l'utilisateur et des données associées à lui (tâches, commentaires, etc.).\n\n\n  async delete() {\n    const {\n      userLogged\n    } = this.state;\n\n    if (window.confirm('Vous êtes sur le point de supprimer votre compte...\\nÊtes vous sûre ?')) {\n      // L'objet contient des formes de valeur différentes, il faut donc les transformer en string pour les envoyer dans la requête HTTP.\n      const formData = new FormData(); // Création d'un objet FormData pour envoyer les données dans la requête HTTP.\n\n      formData.append('', userLogged); // Ajout de l'objet userLogged dans l'objet FormData pour envoyer les données dans la requête HTTP.\n      // Envoi de la requête HTTP pour supprimer le compte de l'utilisateur et les données associées à lui.\n\n      await axios.put(this.userUrl + '/' + userLogged.id + '/' + 1, formData, {\n        headers: {\n          Authorization: \"Bearer \" + sessionStorage.getItem(\"token\") // Ajout du token dans les headers de la requête HTTP.\n\n        }\n      }).then(() => {\n        sessionStorage.clear(); // Suppression du token dans la session storage du navigateur.\n\n        App.ReloadApp(); // Rechargement de la page pour rediriger l'utilisateur vers la page de connexion.\n      });\n    }\n  }\n\n  render() {\n    const {\n      userLogged\n    } = this.state; // Récupération de l'utilisateur connecté.\n\n    const {\n      isLoading,\n      curTask\n    } = this.state; // Récupération de la tâche courante de l'utilisateur connecté.\n    // Récupération des données du formulaire de modification, de l'avatar, du nom, du prénom, de l'email, et de l'image de l'avatar de l'utilisateur connecté.\n\n    const {\n      validForm,\n      valueFirstname,\n      valueLastname,\n      valueEmail,\n      fileAvatar\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profile\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.OnSubmit,\n          disabled: validForm,\n          children: [\" \", !isLoading && userLogged ? /*#__PURE__*/_jsxDEV(Avatar, {\n            dataUser: { ...userLogged,\n              isProfile: true\n            },\n            fileAvatar: fileAvatar,\n            OnChange: this.OnChange,\n            deleteAvatar: this.deleteAvatar\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 39\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"names-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"Prenom\",\n              children: \"Pr\\xE9nom\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"Prenom\",\n              name: \"firstname\",\n              type: \"text\",\n              placeholder: \"Pr\\xE9nom\",\n              value: valueFirstname,\n              onChange: this.OnChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 13\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"Nom\",\n              children: \"Nom\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"Nom\",\n              name: \"lastname\",\n              type: \"text\",\n              placeholder: \"Nom\",\n              value: valueLastname,\n              onChange: this.OnChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"Tasks\",\n            children: \"emploi\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"Tasks\",\n            name: \"tasks\",\n            type: \"text\",\n            readOnly: true,\n            label: \"Emploi\",\n            value: curTask,\n            onClick: this.OnClickTask\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"Email\",\n            children: \"email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"Email\",\n            name: \"email\",\n            type: \"email\",\n            placeholder: \"Ex : example@groupomania.com\" // On met le champ email en readOnly pour ne pas pouvoir le modifier.\n            ,\n            label: \"Adresse email\",\n            value: valueEmail,\n            onChange: this.OnChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 11\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Changement de mot de passe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"NewPassword\",\n            children: \"password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"NewPassword\",\n            name: \"password\",\n            type: \"password\",\n            placeholder: \"Nouveau mot de passe\",\n            label: \"Mot de passe\",\n            onChange: this.OnChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            disabled: validForm,\n            label: \"Mettre \\xE0 jour\",\n            value: \"Mettre \\xE0 jour\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Supprimer le compte !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"button\",\n          onClick: this.delete,\n          label: \"Delete\",\n          value: \"Supprimer le compte!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 7\n      }, this)\n    }, void 0, false);\n  }\n\n}","map":{"version":3,"names":["React","axios","App","Avatar","Profile","Component","constructor","props","state","userLogged","tasksList","inputValid","validForm","valueFirstname","firstname","valueLastname","lastname","valueEmail","email","valuePassword","fileAvatar","curTaskId","task","id","curTask","tasks","curPosTask","userUrl","taskUrl","OnSubmit","bind","OnChange","deleteAvatar","delete","OnClickTask","event","formData","FormData","append","preventDefault","put","headers","Authorization","sessionStorage","getItem","then","ReloadApp","catch","error","console","warn","myCase","target","name","checkForm","setState","value","files","inputName","inputs","pos","length","className","regEmail","RegExp","match","every","element","posTask","forEach","index","window","confirm","clear","render","isLoading","isProfile"],"sources":["C:/Users/Fd-Formation/Desktop/Groupomania/front/src/components/Profile/Profile.js"],"sourcesContent":["// Importer les composants nécessaires à la page d'accueil (Home)\nimport React from 'react'; // Importer React pour utiliser les fonctionnalités de React JS\nimport axios from 'axios'; // Importer axios pour utiliser les fonctionnalités de axios  pour les requêtes HTTP\nimport App from \"../App\"; // Importer le composant App pour récupérer les données de l'utilisateur connecté\nimport Avatar from '../Avatar/Avatar'; // Importer le composant Avatar pour afficher l'avatar de l'utilisateur connecté\n\n// Créer la classe Profile pour afficher le profil de l'utilisateur connecté \nexport default class Profile extends React.Component {\n  constructor(props) { // Constructeur de la classe Profile (récupération des données de l'utilisateur connecté)\n    super(props); // Appel du constructeur de la classe parente (React) \n    this.state = { // Définition des variables de la classe Profile  \n      userLogged: props.userLogged, // Utilisateur connecté (récupéré dans le composant App)  \n      tasksList: props.tasksList, // Liste des tâches (récupéré dans le composant App) - Liste des tâches de l'utilisateur connecté\n      // Formulaires des inputs [Nom, Prénom, Email, Mot de passe, Avatar]\n      inputValid: [true, true, true, true, true],\n      validForm: true,\n      valueFirstname: props.userLogged.firstname,\n      valueLastname: props.userLogged.lastname,\n      valueEmail: props.userLogged.email,\n      valuePassword: null,\n      fileAvatar: null,\n      // Tâche courante (tâche courante de l'utilisateur connecté) et position de la tâche dans la liste des tâches.\n      curTaskId: props.userLogged.task.id, // Id de la tâche courante de l'utilisateur connecté\n      curTask: props.userLogged.task.tasks, // Tâche courante de l'utilisateur connecté (récupéré dans le composant App)\n      curPosTask: null\n    }\n    // Récupération de l'url de l'API pour les requêtes HTTP \n    this.userUrl = 'http://localhost:8080/api/user'; // Url de l'API pour les requêtes HTTP  pour les utilisateurs\n    this.taskUrl = 'http://localhost:8080/api/tasks'; // Url de l'API pour les requêtes HTTP  pour les tâches de l'utilisateur connecté\n\n    this.OnSubmit = this.OnSubmit.bind(this); // Gestion d'envoi (bind) de la fonction OnSubmit \n    this.OnChange = this.OnChange.bind(this); // Gestion des events (bind) de la fonction OnChange\n    this.deleteAvatar = this.deleteAvatar.bind(this); // Suppression de l'avatar de l'utilisateur connecté  \n    this.delete = this.delete.bind(this); // Suppression de l'utilisateur connecté\n    this.OnClickTask = this.OnClickTask.bind(this); // Gestion du clic sur une tâche de la liste des tâches de l'utilisateur connecté\n  }\n\n  // Gestion d'envoi des données de l'utilisateur connecté, modification de son profil et récupération de la liste des tâches de l'utilisateur connecté.\n  async OnSubmit(event) {\n    const { userLogged, valueFirstname, valueLastname, valueEmail, valuePassword, fileAvatar, curTaskId } = this.state;\n    // L'objet contient des formes de valeurs pour les données de l'utilisateur connecté et des données de la tâche courante.\n    const formData = new FormData(); // Création d'un objet FormData pour les données de l'utilisateur connecté\n    formData.append(\"userId\", userLogged.id); // Ajout de l'id de l'utilisateur connecté à l'objet FormData  \n    formData.append(\"firstname\", valueFirstname); // Ajout du prénom de l'utilisateur connecté à l'objet FormData\n    formData.append(\"lastname\", valueLastname); // Ajout du nom de l'utilisateur connecté à l'objet FormData\n    formData.append(\"taskId\", curTaskId); // Ajout de l'id de la tâche courante à l'objet FormData  \n    formData.append(\"email\", valueEmail); // Ajout de l'email de l'utilisateur connecté à l'objet FormData \n    // Si le mot de passe est renseigné, alors on ajoute le mot de passe à l'objet FormData  sinon on ne fait rien (pas de modification du mot de passe)\n    if (valuePassword != null) formData.append(\"password\", valuePassword);\n    // Si l'avatar est renseigné, alors on ajoute l'avatar à l'objet FormData  sinon on ne fait rien (pas de modification de l'avatar)\n    if (fileAvatar != null) formData.append(\"avatar\", fileAvatar);\n\n    event.preventDefault();\n    // Envoi de la requête HTTP pour la modification du profil de l'utilisateur connecté \n    // et récupération de la liste des tâches de l'utilisateur connecté  avec axios et la méthode PUT\n    await axios.put(this.userUrl + '/' + userLogged.id + '/' + 0, formData, {\n      headers: { // Ajout des headers à la requête HTTP pour la modification du profil de l'utilisateur connecté\n        Authorization: \"Bearer \" + sessionStorage.getItem(\"token\") // Ajout du token d'authentification à la requête HTTP pour la modification du profil de l'utilisateur connecté\n      }\n    })\n      .then(() => App.ReloadApp())\n      .catch(error => {  // Gestion des erreurs.\n        console.error('Error Edit Avatar!'); // Affichage d'un message d'erreur si la modification du profil de l'utilisateur connecté a échoué \n        console.warn(error);  // Affichage d'un message d'erreur en cas d'erreur de réponse de l'API \n      });\n\n  }\n\n  // Gestion des events.\n  OnChange(event) {\n    const myCase = event.target.name;\n    switch (myCase) {\n      case 'firstname':\n        this.checkForm(event.target);\n        this.setState({ valueFirstname: event.target.value });\n        break;\n      case 'lastname':\n        this.checkForm(event.target);\n        this.setState({ valueLastname: event.target.value });\n        break;\n      case 'email':\n        this.checkForm(event.target);\n        this.setState({ valueEmail: event.target.value });\n        break;\n      case 'password':\n        this.checkForm(event.target);\n        this.setState({ valuePassword: event.target.value });\n        break;\n      case 'avatar':\n        this.checkForm(event.target);\n        this.setState({ fileAvatar: event.target.files[0] });\n        break;\n      default:\n        console.error('Nothing here!');\n        break;\n    }\n  }\n\n  // Contrôle des champs de formulaire.\n  checkForm(target) {\n    const { inputValid } = this.state;\n    const inputName = target.name;\n    let inputs = [...inputValid];\n    let pos = 0;\n    switch (inputName) {\n      default:\n        console.error('Unknown field name!');\n        break;\n      case 'firstname':\n      case 'lastname':\n        if (inputName === 'lastname') pos = 1;\n\n        if (target.value.length >= 2) {\n          // Change style\n          target.className = \"valid\";\n          inputs[pos] = true;\n          this.setState({ inputValid: inputs });\n        }\n        else {\n          // Change style\n          target.className = \"error\";\n          inputs[pos] = false;\n          this.setState({ inputValid: inputs });\n        }\n        break;\n      case 'email':\n        let regEmail = new RegExp(/^[a-zA-Z0-9.-]+@[a-zA-Z0-9.-]+(\\.[a-zA-Z]{2,})/g);\n        pos = 2;\n        if (!target.value.match(regEmail)) {\n          // Change style\n          target.className = \"error\";\n          inputs[pos] = false;\n          this.setState({ inputValid: inputs });\n        }\n        else {\n          // Change style\n          target.className = \"valid\";\n          inputs[pos] = true;\n          this.setState({ inputValid: inputs });\n        }\n        break;\n      case 'password':\n        pos = 3;\n        if (target.value.length >= 4) {\n          // Change style\n          target.className = \"valid\";\n          inputs[pos] = true;\n          this.setState({ inputValid: inputs });\n        }\n        else {\n          // Change style\n          target.className = \"error\";\n          inputs[pos] = false;\n          this.setState({ inputValid: inputs });\n        }\n        if (target.value.length === 0) {\n          // Change style\n          target.className = \"\";\n          inputs[pos] = true;\n          this.setState({ inputValid: inputs });\n        };\n        break;\n      case 'avatar':\n        pos = 4;\n        if (target.value) {\n          // Change style\n          target.className = \"valid\";\n          inputs[pos] = true;\n          this.setState({ inputValid: inputs });\n        }\n        else {\n          // Change style\n          target.className = \"\";\n          inputs[pos] = false;\n          this.setState({ inputValid: inputs });\n        };\n        break;\n    }\n\n    if (inputs.every(element => element === true))\n      this.setState({ validForm: false });\n    else\n      this.setState({ validForm: true });\n  }\n\n  // Modification de la tâche courante (click sur une tâche) et récupération de la position de la tâche dans la liste des tâches.\n  async OnClickTask(event) {\n    const { tasksList, curPosTask, userLogged } = this.state;\n    let posTask = curPosTask + 1;\n    if (!curPosTask) posTask = 1;\n    if (posTask >= tasksList.length) posTask = 0;\n\n    tasksList.forEach((task, index) => {\n      if (posTask === index) {\n\n        if (task.id === userLogged.task.id) {\n          event.target.className = \"\";\n          this.setState({ validForm: true });\n        }\n        else {\n          event.target.className = \"valid\";\n          this.setState({ validForm: false });\n        }\n        this.setState({\n          curPosTask: posTask,\n          curTaskId: tasksList[posTask].id,\n          curTask: tasksList[posTask].tasks\n        });\n\n      }\n    });\n  }\n\n\n  // Suppression de l'avatar de l'utilisateur (Avatar par défaut) et réinitialisation du champ input.  \n  async deleteAvatar() {\n    const { userLogged } = this.state;\n    if (window.confirm('Votre avatar est sur le point d\\'être supprimer...\\nÊtes vous sûre ?')) {\n      // Supprimer la demande de l'utilisateur (avatar par défaut) et réinitialiser le champ input.\n      await axios.delete(this.userUrl + '/' + userLogged.id + '/' + 1, {\n        headers: {\n          // Envoyer le token dans les headers de la requête pour authentifier l'utilisateur (sécurité).\n          Authorization: \"Bearer \" + sessionStorage.getItem(\"token\")\n        }\n      }).then(() => App.ReloadApp()); // Recharger l'application pour mettre à jour l'avatar de l'utilisateur.\n    }\n  }\n\n\n  // Suppression du compte de l'utilisateur et des données associées à lui (tâches, commentaires, etc.).\n  async delete() {\n    const { userLogged } = this.state;\n    if (window.confirm('Vous êtes sur le point de supprimer votre compte...\\nÊtes vous sûre ?')) {\n      // L'objet contient des formes de valeur différentes, il faut donc les transformer en string pour les envoyer dans la requête HTTP.\n      const formData = new FormData(); // Création d'un objet FormData pour envoyer les données dans la requête HTTP.\n      formData.append('', userLogged); // Ajout de l'objet userLogged dans l'objet FormData pour envoyer les données dans la requête HTTP.\n      // Envoi de la requête HTTP pour supprimer le compte de l'utilisateur et les données associées à lui.\n      await axios.put(this.userUrl + '/' + userLogged.id + '/' + 1, formData, {\n        headers: {\n          Authorization: \"Bearer \" + sessionStorage.getItem(\"token\") // Ajout du token dans les headers de la requête HTTP.\n        }\n      })\n        .then(() => {\n          sessionStorage.clear(); // Suppression du token dans la session storage du navigateur.\n          App.ReloadApp(); // Rechargement de la page pour rediriger l'utilisateur vers la page de connexion.\n        });\n    }\n  }\n\n  render() {\n    const { userLogged } = this.state; // Récupération de l'utilisateur connecté.\n    const { isLoading, curTask } = this.state; // Récupération de la tâche courante de l'utilisateur connecté.\n    // Récupération des données du formulaire de modification, de l'avatar, du nom, du prénom, de l'email, et de l'image de l'avatar de l'utilisateur connecté.\n    const { validForm, valueFirstname, valueLastname, valueEmail, fileAvatar } = this.state;\n    return (<>\n\n      {/* Div contenant le formulaire de modification du profil de l'utilisateur. */}\n      <div className='profile'>\n        <form onSubmit={this.OnSubmit} disabled={validForm}> {/* Désactivation du formulaire si les champs ne sont pas valides. */}\n          {/* Div contenant le nom de l'utilisateur, le prénom, l'email et le mot de passe, ainsi que le bouton de modification de l'avatar. */}\n          {!isLoading && userLogged ? <Avatar dataUser={{ ...userLogged, isProfile: true }} fileAvatar={fileAvatar} OnChange={this.OnChange} deleteAvatar={this.deleteAvatar} /> : null}\n          <div className=\"names-content\">\n            <label htmlFor=\"Prenom\">Prénom</label>\n            <input id='Prenom' name='firstname' type='text' placeholder='Prénom'\n              value={valueFirstname} onChange={this.OnChange} required /> {/* OnChange est appelé lorsque l'utilisateur change la valeur du champ input. */}\n\n            <label htmlFor=\"Nom\">Nom</label>\n            <input id='Nom' name='lastname' type='text' placeholder='Nom'\n              value={valueLastname} onChange={this.OnChange} required />\n          </div>\n          <label htmlFor=\"Tasks\">emploi</label>\n          <input id='Tasks' name='tasks' type='text' readOnly\n            label='Emploi' value={curTask} onClick={this.OnClickTask} />\n\n          <label htmlFor=\"Email\">email</label>\n          {/* Si l'email est valide, on affiche l'email de l'utilisateur. Sinon, on affiche un message d'erreur. */}\n          <input id='Email' name='email' type='email' placeholder='Ex : example@groupomania.com' // On met le champ email en readOnly pour ne pas pouvoir le modifier.\n            label='Adresse email' value={valueEmail} onChange={this.OnChange} required /> {/* On peut modifier l'email de l'utilisateur  en cliquant sur le champ email. */}\n\n          {/* Réinitialisation du mot de passe de l'utilisateur*/}\n          <h2>Changement de mot de passe</h2>\n          <label htmlFor=\"NewPassword\">password</label>\n          <input id='NewPassword' name='password' type='password' placeholder='Nouveau mot de passe'\n            label='Mot de passe' onChange={this.OnChange} />\n          <input type='submit' disabled={validForm} label='Mettre à jour' value='Mettre à jour' />\n        </form>\n\n        <h3>Supprimer le compte !</h3>\n        <input type='button' onClick={this.delete} label='Delete' value='Supprimer le compte!' />\n      </div>\n    </>)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}