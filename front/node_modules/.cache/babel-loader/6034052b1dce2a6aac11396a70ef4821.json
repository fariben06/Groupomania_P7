{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fd-Formation\\\\Desktop\\\\Groupomania\\\\front\\\\src\\\\components\\\\Comments\\\\Comments.js\";\nimport React from \"react\"; // Importer React depuis le répertoire node_modules (React est un module)\n\nimport axios from \"axios\"; // Importer axios depuis le répertoire node_modules (axios est un module)\n\nimport App from \"../App\"; // Importer App depuis le répertoire src (./ = src/)\n\nimport Comment from \"./Comment\"; // Importer Comment depuis le répertoire src (./ = src/)\n\nimport Avatar from \"../Avatar/Avatar\"; // Importer Avatar depuis le répertoire src (./ = src/)\n\nimport \"./Comments.css\"; // Importer le fichier CSS depuis le répertoire src (./ = src/)\n// Exporter le composant Comments (export default) (Comments = composant)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class Comments extends React.Component {\n  constructor(props) {\n    // Constructeur du composant Comments\n    super(props); // Appel du constructeur de la classe parente (React.Component)\n\n    this.state = {\n      // Initialisation des variables du composant\n      // Données du composant Comments\n      userLogged: props.userLogged,\n      // Utilisateur connecté (userLogged)\n      articleId: props.articleId,\n      // Id de l'article concerné par les commentaires\n      comments: props.comments,\n      // Commentaires de l'article (comments)\n      valueComment: '',\n      // Valeur du commentaire (input) (valueComment)\n      fileUpload: null,\n      // Fichier uploadé (image) (null = pas de fichier)\n      // Options du composant Comments\n      isClicked: false,\n      // Afficher/Cacher les options (isClicked) (false = caché) \n      isValid: true,\n      // Validation du commentaire (isValid) (true = valide)\n      isLoading: false // Chargement (isLoading) (false = pas chargé)\n\n    }; // URL des commentaires de l'article (commentUrl)\n\n    this.commentUrl = 'http://localhost:8080/api/comments'; // OnClick du bouton d'options (onOptionsClick)\n\n    this.OnSubmitComment = this.OnSubmitComment.bind(this); // OnSubmitComment = fonction du composant Comments\n\n    this.OnChange = this.OnChange.bind(this); // OnChange = fonction du composant Comments\n\n    this.onDeleteClick = this.onDeleteClick.bind(this); // onDeleteClick = fonction du composant Comments\n\n    this.onOptionsClick = this.onOptionsClick.bind(this); // onOptionsClick = fonction du composant Comments\n  } // Gestion de l'envoi du commentaire (submit).\n\n\n  OnSubmitComment(event) {\n    const {\n      userLogged,\n      articleId,\n      valueComment,\n      fileUpload\n    } = this.state; // Récupération des données du composant\n    // L'objet contient des formes de valeur (value)\n\n    const formData = new FormData(); // Création d'un objet FormData\n\n    formData.append(\"userId\", userLogged.id); // Ajout de l'id de l'utilisateur (userId)\n\n    formData.append(\"comment\", valueComment); // Ajout du commentaire (comment)\n\n    formData.append(\"image\", fileUpload); // Ajout de l'image (image)\n\n    formData.append(\"articleId\", articleId); // Ajout de l'id de l'article (articleId)\n\n    event.preventDefault(); // Annulation de l'action par défaut (submit)\n    // Post request (envoi du commentaire) (commentUrl = url des commentaires)\n\n    axios.post(this.commentUrl, formData, {\n      headers: {\n        // Ajout des headers\n        Authorization: \"Bearer \" + sessionStorage.getItem(\"token\") // Ajout du token\n\n      }\n    }).then(() => {\n      App.ReloadApp();\n    }) // Rafraichissement de la page (App.ReloadApp)\n    .catch(error => {\n      console.error('Erreur Ajouter un commentaire');\n      console.warn(error); // Affiche l'erreur dans la console\n    });\n  } // Gestion des events du composant Comments (change) (OnChange = fonction du composant Comments)\n\n\n  OnChange(event) {\n    const myState = event.target.name; // Récupération du nom de l'input (myState)\n\n    switch (myState) {\n      // Switch sur le nom de l'input\n      case 'comment':\n        if (event.target.value.length) {\n          // Si le commentaire est non vide (event.target.value.length) \n          event.target.className = \"valid\"; // Ajout de la class \"valid\" (className = class) (valid = class)\n\n          this.setState({\n            isValid: false\n          }); // Modification du state (isValid) (false = invalide)\n        } else {\n          // Si le commentaire est vide\n          // Suppression de la class \"valid\" (className = class) (valid = class)\n          event.target.className = \"\"; // Modification du state (isValid) (true = valide)\n\n          this.setState({\n            isValid: true\n          });\n        } // Modification du state (valueComment) (event.target.value = valeur) \n\n\n        this.setState({\n          valueComment: event.target.value\n        });\n        break;\n      // Sort de la fonction OnChange\n\n      case 'image':\n        // Si l'input est image\n        // Modification du state (fileUpload) (event.target.files[0] = fichier)\n        this.setState({\n          fileUpload: event.target.files[0]\n        });\n        break;\n      // Sort de la fonction OnChange\n\n      default:\n        // Si l'input n'est pas image (default) ou si l'input n'existe pas (undefined)\n        console.error('Rien ici !');\n        break;\n    }\n  } // Suppression d'un commentaire (onDeleteClick = fonction du composant Comments) (commentId = id du commentaire)\n\n\n  async onDeleteClick(event) {\n    const commentId = event.target.value; // Récupération de l'id du commentaire (commentId)\n\n    if (window.confirm('Êtes vous sûre ?')) {\n      // Confirmation de la suppression du commentaire (window.confirm)\n      // Delete request (suppression du commentaire) (commentUrl = url des commentaires)\n      await axios.delete(this.commentUrl + '/' + commentId, {\n        // await = attendre la réponse de la requête\n        headers: {\n          // Ajout des headers\n          // Ajout du token (Authorization = header)                            \n          Authorization: \"Bearer \" + sessionStorage.getItem(\"token\")\n        }\n      }).then(() => App.ReloadApp()); // Rafraichissement de la page (App.ReloadApp)\n    }\n  } // Afficher/Cacher les options (onOptionsClick = fonction du composant Comments)\n\n\n  onOptionsClick() {\n    const {\n      isClicked\n    } = this.state; // Récupération du state (isClicked) (false = caché)\n\n    switch (isClicked) {\n      // Switch sur le state (isClicked) \n      // Masquer les options.\n      default: // Si le state est caché (default)\n\n      case true:\n        // Si le state est caché (true)\n        this.setState({\n          isClicked: false\n        }); // Modification du state (isClicked) (false = caché)\n\n        break;\n      // Sort de la fonction onOptionsClick\n      // Afficher les options (isClicked = true)\n\n      case false:\n        // Si le state est affiché (false)\n        this.setState({\n          isClicked: true\n        }); // Modification du state (isClicked) (true = affiché)\n\n        break;\n      // Sort de la fonction onOptionsClick\n    }\n  } // Convertisseur de date (convertDate = fonction du composant Comments) (date = date à convertir)\n\n\n  convertDate(myDate) {\n    const start = new Date(myDate).getTime(); // Récupération de la date (start) (new Date(myDate).getTime())\n\n    const current = Date.now(); // Récupération de la date actuelle (current) (Date.now())\n\n    const result = new Date(current - start); // Calcul de la différence entre la date actuelle et la date (result) (current - start)\n\n    let since = new Date(result); // Création d'un objet Date (since) (result)\n\n    if (since.getFullYear() <= 1970) {\n        // Si l'année est inférieure à 1970, on affiche l'année (getFullYear)\n        if (since.getMonth() + 1 <= 1) {\n            // Si le mois est inférieur à 1, on affiche le mois (getMonth)\n            if (since.getDate() <= 1) {\n                // Si le jour est inférieur à 1, on affiche le jour (getDate)\n                if (since.getHours() <= 1) {\n                    // Si l'heure est inférieur à 1, on affiche l'heure (getHours)\n                    if (since.getMinutes() < 1) // Si les minutes sont inférieures à 1, on affiche les minutes (getMinutes)\n                      since = new Date(result).getSeconds() + 'sec.'; // Si les secondes sont inférieures à 1, on affiche les secondes (getSeconds)\n                    else since = since.getMinutes() + 'min.'; // Sinon, on affiche les minutes (getMinutes)\n\n                } else since = since.getHours() + 'h.'; // Sinon, on affiche les heures (getHours)\n\n            } else since = since.getDate() + 'j.'; // Sinon, on affiche les jours (getDate)\n\n        } else since = since.getMonth() + 1 + 'm.'; // Sinon, on affiche les mois (getMonth)\n\n    } else since = since.getFullYear() + 'y.'; // Sinon, on affiche les années (getFullYear)\n\n    return `${since}`; // Renvoi de la date convertie (since) (since = date convertie)\n  } // Rendu du composant Comments (render)\n\n\n  render() {\n    const {\n      userLogged,\n      comments\n    } = this.state; // Récupération du state (userLogged) (comments)\n\n    const {\n      isValid,\n      valueComment\n    } = this.state; // Récupération du state (isValid) (valueComment)\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [comments ? comments.map((comment, i) =>\n      /*#__PURE__*/\n      // Pour chaque commentaire (comment)\n      // Rendu du commentaire (Comment) (key = id du commentaire) (userLogged = utilisateur connecté) \n      // (comment = commentaire) (onDeleteClick = fonction du composant Comments)\n      _jsxDEV(Comment, {\n        userLogged: userLogged,\n        comment: comment,\n        onDeleteClick: this.onDeleteClick\n      }, 'comment-' + comment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this)) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"addComment\",\n        onSubmit: this.OnSubmitComment,\n        disabled: isValid,\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          dataUser: { ...userLogged,\n            isProfile: false\n          }\n        }, 'avatar-' + userLogged.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"comment\",\n          children: \"comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"comment\",\n          type: \"text\",\n          name: \"comment\",\n          placeholder: \"Ecrivez un commentaire...\",\n          value: valueComment,\n          onChange: this.OnChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          \"aria-label\": \"sendComment\",\n          disabled: isValid,\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa-solid fa-paper-plane\",\n            alt: \"sendComment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"hidden\",\n          name: \"userId\",\n          value: userLogged.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}","map":{"version":3,"names":["React","axios","App","Comment","Avatar","Comments","Component","constructor","props","state","userLogged","articleId","comments","valueComment","fileUpload","isClicked","isValid","isLoading","commentUrl","OnSubmitComment","bind","OnChange","onDeleteClick","onOptionsClick","event","formData","FormData","append","id","preventDefault","post","headers","Authorization","sessionStorage","getItem","then","ReloadApp","catch","error","console","warn","myState","target","name","value","length","className","setState","files","commentId","window","confirm","delete","convertDate","myDate","start","Date","getTime","current","now","result","since","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","render","map","comment","i","isProfile"],"sources":["C:/Users/Fd-Formation/Desktop/Groupomania/front/src/components/Comments/Comments.js"],"sourcesContent":["import React from \"react\"; // Importer React depuis le répertoire node_modules (React est un module)\nimport axios from \"axios\"; // Importer axios depuis le répertoire node_modules (axios est un module)\nimport App from \"../App\"; // Importer App depuis le répertoire src (./ = src/)\nimport Comment from \"./Comment\"; // Importer Comment depuis le répertoire src (./ = src/)\nimport Avatar from \"../Avatar/Avatar\"; // Importer Avatar depuis le répertoire src (./ = src/)\nimport \"./Comments.css\"; // Importer le fichier CSS depuis le répertoire src (./ = src/)\n\n// Exporter le composant Comments (export default) (Comments = composant)\nexport default class Comments extends React.Component {\n    constructor(props) { // Constructeur du composant Comments\n        super(props);    // Appel du constructeur de la classe parente (React.Component)\n        this.state = {   // Initialisation des variables du composant\n            // Données du composant Comments\n            userLogged: props.userLogged, // Utilisateur connecté (userLogged)\n            articleId: props.articleId,   // Id de l'article concerné par les commentaires\n            comments: props.comments,     // Commentaires de l'article (comments)\n            valueComment: '',             // Valeur du commentaire (input) (valueComment)\n            fileUpload: null,             // Fichier uploadé (image) (null = pas de fichier)\n            // Options du composant Comments\n            isClicked: false,             // Afficher/Cacher les options (isClicked) (false = caché) \n            isValid: true,                // Validation du commentaire (isValid) (true = valide)\n            isLoading: false              // Chargement (isLoading) (false = pas chargé)\n        }\n        // URL des commentaires de l'article (commentUrl)\n        this.commentUrl = 'http://localhost:8080/api/comments';\n        // OnClick du bouton d'options (onOptionsClick)\n        this.OnSubmitComment = this.OnSubmitComment.bind(this); // OnSubmitComment = fonction du composant Comments\n        this.OnChange = this.OnChange.bind(this); // OnChange = fonction du composant Comments\n        this.onDeleteClick = this.onDeleteClick.bind(this); // onDeleteClick = fonction du composant Comments\n        this.onOptionsClick = this.onOptionsClick.bind(this); // onOptionsClick = fonction du composant Comments\n    }\n\n    // Gestion de l'envoi du commentaire (submit).\n    OnSubmitComment(event) {\n        const { userLogged, articleId, valueComment, fileUpload } = this.state; // Récupération des données du composant\n        // L'objet contient des formes de valeur (value)\n        const formData = new FormData();            // Création d'un objet FormData\n        formData.append(\"userId\", userLogged.id);   // Ajout de l'id de l'utilisateur (userId)\n        formData.append(\"comment\", valueComment);   // Ajout du commentaire (comment)\n        formData.append(\"image\", fileUpload);       // Ajout de l'image (image)\n        formData.append(\"articleId\", articleId);    // Ajout de l'id de l'article (articleId)\n\n        event.preventDefault();                     // Annulation de l'action par défaut (submit)\n        // Post request (envoi du commentaire) (commentUrl = url des commentaires)\n        axios.post(this.commentUrl, formData, {\n            headers: {                              // Ajout des headers\n                Authorization: \"Bearer \" + sessionStorage.getItem(\"token\") // Ajout du token\n            }\n        }).then(() => { App.ReloadApp(); })       // Rafraichissement de la page (App.ReloadApp)\n            .catch(error => {\n                console.error('Erreur Ajouter un commentaire');\n                console.warn(error); // Affiche l'erreur dans la console\n            });\n    }\n\n    // Gestion des events du composant Comments (change) (OnChange = fonction du composant Comments)\n    OnChange(event) {\n        const myState = event.target.name; // Récupération du nom de l'input (myState)\n        switch (myState) { // Switch sur le nom de l'input\n            case 'comment':\n                if (event.target.value.length) { // Si le commentaire est non vide (event.target.value.length) \n                    event.target.className = \"valid\"; // Ajout de la class \"valid\" (className = class) (valid = class)\n                    this.setState({ isValid: false }); // Modification du state (isValid) (false = invalide)\n                }\n                else { // Si le commentaire est vide\n                    // Suppression de la class \"valid\" (className = class) (valid = class)\n                    event.target.className = \"\";\n                    // Modification du state (isValid) (true = valide)\n                    this.setState({ isValid: true });\n                }\n                // Modification du state (valueComment) (event.target.value = valeur) \n                this.setState({ valueComment: event.target.value });\n                break; // Sort de la fonction OnChange\n\n            case 'image':  // Si l'input est image\n                // Modification du state (fileUpload) (event.target.files[0] = fichier)\n                this.setState({ fileUpload: event.target.files[0] });\n                break; // Sort de la fonction OnChange\n            default: // Si l'input n'est pas image (default) ou si l'input n'existe pas (undefined)\n                console.error('Rien ici !');\n                break;\n        }\n    }\n\n    // Suppression d'un commentaire (onDeleteClick = fonction du composant Comments) (commentId = id du commentaire)\n    async onDeleteClick(event) {\n        const commentId = event.target.value; // Récupération de l'id du commentaire (commentId)\n        if (window.confirm('Êtes vous sûre ?')) { // Confirmation de la suppression du commentaire (window.confirm)\n            // Delete request (suppression du commentaire) (commentUrl = url des commentaires)\n            await axios.delete(this.commentUrl + '/' + commentId, { // await = attendre la réponse de la requête\n                headers: {                // Ajout des headers\n                    // Ajout du token (Authorization = header)                            \n                    Authorization: \"Bearer \" + sessionStorage.getItem(\"token\")\n                }\n            }).then(() => App.ReloadApp()); // Rafraichissement de la page (App.ReloadApp)\n        }\n    }\n\n    // Afficher/Cacher les options (onOptionsClick = fonction du composant Comments)\n    onOptionsClick() {\n        const { isClicked } = this.state; // Récupération du state (isClicked) (false = caché)\n        switch (isClicked) { // Switch sur le state (isClicked) \n            // Masquer les options.\n            default: // Si le state est caché (default)\n            case true: // Si le state est caché (true)\n                this.setState({ isClicked: false }); // Modification du state (isClicked) (false = caché)\n                break; // Sort de la fonction onOptionsClick\n\n            // Afficher les options (isClicked = true)\n            case false: // Si le state est affiché (false)\n                this.setState({ isClicked: true }); // Modification du state (isClicked) (true = affiché)\n                break; // Sort de la fonction onOptionsClick\n        }\n    }\n\n    // Convertisseur de date (convertDate = fonction du composant Comments) (date = date à convertir)\n    convertDate(myDate) {\n        const start = new Date(myDate).getTime(); // Récupération de la date (start) (new Date(myDate).getTime())\n        const current = Date.now(); // Récupération de la date actuelle (current) (Date.now())\n        const result = new Date(current - start); // Calcul de la différence entre la date actuelle et la date (result) (current - start)\n        let since = new Date(result); // Création d'un objet Date (since) (result)\n        if (since.getFullYear() <= 1970) // Si l'année est inférieure à 1970, on affiche l'année (getFullYear)\n            if (since.getMonth() + 1 <= 1) // Si le mois est inférieur à 1, on affiche le mois (getMonth)\n                if (since.getDate() <= 1) // Si le jour est inférieur à 1, on affiche le jour (getDate)\n                    if (since.getHours() <= 1) // Si l'heure est inférieur à 1, on affiche l'heure (getHours)\n                        if (since.getMinutes() < 1) // Si les minutes sont inférieures à 1, on affiche les minutes (getMinutes)\n                            since = new Date(result).getSeconds() + 'sec.'; // Si les secondes sont inférieures à 1, on affiche les secondes (getSeconds)\n                        else since = since.getMinutes() + 'min.'; // Sinon, on affiche les minutes (getMinutes)\n                    else since = since.getHours() + 'h.'; // Sinon, on affiche les heures (getHours)\n                else since = since.getDate() + 'j.'; // Sinon, on affiche les jours (getDate)\n            else since = since.getMonth() + 1 + 'm.'; // Sinon, on affiche les mois (getMonth)\n        else since = since.getFullYear() + 'y.'; // Sinon, on affiche les années (getFullYear)\n\n        return `${since}`;  // Renvoi de la date convertie (since) (since = date convertie)\n    }\n\n    // Rendu du composant Comments (render)\n    render() {\n        const { userLogged, comments } = this.state; // Récupération du state (userLogged) (comments)\n        const { isValid, valueComment } = this.state // Récupération du state (isValid) (valueComment)\n        return (<>\n            {comments ? comments.map((comment, i) => ( // Pour chaque commentaire (comment)\n                // Rendu du commentaire (Comment) (key = id du commentaire) (userLogged = utilisateur connecté) \n                // (comment = commentaire) (onDeleteClick = fonction du composant Comments)\n                <Comment key={'comment-' + comment.id} userLogged={userLogged} comment={comment} onDeleteClick={this.onDeleteClick} />\n            )) : (<></>)}\n\n            {/* Rendu du formulaire d'ajout de commentaire, utilisateur connecté, avatar */}\n            <form className=\"addComment\" onSubmit={this.OnSubmitComment} disabled={isValid}>\n                <Avatar key={'avatar-' + userLogged.id} dataUser={{ ...userLogged, isProfile: false }} />\n                <label htmlFor=\"comment\">comment</label>\n                <input id=\"comment\" type='text' name=\"comment\" placeholder='Ecrivez un commentaire...'\n                    value={valueComment} onChange={this.OnChange} />\n                <button aria-label=\"sendComment\" disabled={isValid}>\n                    <i className=\"fa-solid fa-paper-plane\" alt=\"sendComment\"></i>\n                </button>\n                <input type='hidden' name=\"userId\" value={userLogged.id} />\n            </form>\n        </>)\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}