{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fd-Formation\\\\Desktop\\\\Groupomania\\\\front\\\\src\\\\components\\\\Home\\\\Home.js\";\nimport React from \"react\"; // Importer React depuis le répertoire node_modules (React est un module)\n\nimport axios from \"axios\"; // Importer axios depuis le répertoire node_modules (axios est un module)\n\nimport App from \"../App\"; // Importer App depuis le répertoire src (./ = src/)\n\nimport Avatar from \"../Avatar/Avatar\"; // Importer Avatar depuis le répertoire src (./ = src/)\n\nimport Articles from \"../Articles/Articles\"; // Importer Articles depuis le répertoire src (./ = src/)\n\nimport Loader from \"../Loader/Loader\"; // Importer Loader depuis le répertoire src (./ = src/)\n\nimport Profile from \"../Profile/Profile\"; // Importer Profile depuis le répertoire src (./ = src/)\n\nimport Admin from \"../Admin/Admin\"; // Importer Admin depuis le répertoire src (./ = src/) \n\nimport \"./Home.css\"; // Importer le fichier CSS depuis le répertoire src (./ = src/)\n// Exporter le composant Home (export default)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class Home extends React.Component {\n  constructor(props) {\n    // Constructeur du composant Home\n    super(props); // Appel du constructeur du composant parent (React.Component)\n\n    this.state = {\n      // Définition du state du composant Home\n      // Données de l'utilisateur connecté.\n      articles: props.articles,\n      // Liste des articles de l'utilisateur connecté.\n      userLogged: props.userLogged,\n      // Utilisateur connecté (objet) à partir du state du composant App.\n      tasksList: null,\n      // Liste des emplois de l'utilisateur connecté (objet) (à récuperér dans le state)\n      // Option de la page actuelle (Home, Profile, Admin).\n      isLoading: false,\n      // Indicateur de chargement (à récuperér dans le state) (true = chargement en cours)\n      curPage: 'Home' // Page actuelle (Home, Profile, Admin)  (à récuperér dans le state) (Home = page d'accueil)\n\n    }; // Url de récuperation des tâches de l'utilisateur connecté.\n\n    this.taskUrl = 'http://localhost:8080/api/tasks'; // OnClick du composant Home (navigateTo) (navigateTo = fonction)  \n\n    this.navigateTo = this.navigateTo.bind(this); // OnClick du composant Home (logout) (logout = fonction)   \n\n    this.logout = this.logout.bind(this);\n  } // Fonction appelée après le rendu du composant (componentDidMount = fonction)\n\n\n  componentDidMount() {\n    this.getTasks(); // Récuperation des tâches de l'utilisateur connecté.\n  } // Fonction récuperant les tâches de l'utilisateur connecté.\n\n\n  async getTasks() {\n    const {\n      curTaskId\n    } = this.state; // Récuperation de l'id de la tâche en cours (curTaskId)\n\n    this.setState({\n      isLoading: true\n    }); // Mise en place du loader (isLoading)\n    // Récuperation des tâches de l'utilisateur connecté (res = objet) (await = attendre) (axios = module) (this.taskUrl = url)\n\n    let tasks = await axios.get(this.taskUrl).then(res => {\n      // Pour chaque tâche de l'utilisateur connecté (task = objet) (index = entier) (tasks = tableau)\n      res.data.tasks.forEach((task, index) => {\n        // Si l'id de la tâche en cours est égal à l'id de la tâche récuperée (curTaskId)\n        if (task.id === curTaskId) this.setState({\n          curPosTask: index\n        });\n      }); // Retourner le tableau des tâches de l'utilisateur connecté (tasks = tableau)\n\n      return res.data.tasks;\n    }); // Mise en place du tableau des tâches de l'utilisateur connecté (tasksList = tableau) (isLoading = false)\n\n    this.setState({\n      tasksList: tasks,\n      isLoading: false\n    });\n  } // Modification de la page à afficher (curPage)\n\n\n  navigateTo(event) {\n    const myPage = event.target.id; // Récuperation de l'id de la page à afficher (myPage)\n\n    this.setState({\n      curPage: myPage\n    }); // Mise en place de la page à afficher (curPage)\n  } // Déconnexion de l'utilisateur connecté (logout = fonction)\n\n\n  logout() {\n    if (window.confirm('Vous êtes sur le point de vous déconnectez...\\nÊtes vous sûre ?')) {\n      sessionStorage.clear(); // Suppression de la session utilisateur (sessionStorage = objet) (clear = fonction) \n\n      App.ReloadApp(); // Rechargement de la page (App = module) (ReloadApp = fonction)\n    }\n  } // Mise en place du composant selon la page actuelle. (curPage)\n\n\n  setComponent() {\n    // Récuperation des données du composant Home (curPage, articles, tasksList, userLogged) (state = objet)\n    const {\n      curPage,\n      articles,\n      tasksList,\n      userLogged\n    } = this.state; // Switch sur la page actuelle (curPage)\n\n    switch (curPage) {\n      // Page d'accueil (Home)\n      case 'Home':\n        // Retourner le composant Articles (Articles = module) (articles = tableau) (userLogged = objet) (navigateTo = fonction) (logout = fonction)\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Articles, {\n            articles: articles,\n            userLogged: userLogged,\n            navigateTo: this.navigateTo,\n            logout: this.logout\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 19\n          }, this)\n        }, void 0, false);\n      // Page Profil (Profile)\n\n      case 'Profile':\n        // Retourner le composant Profile (Profile = module) (userLogged = objet) (navigateTo = fonction) (logout = fonction)\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Profile, {\n            userLogged: userLogged,\n            tasksList: tasksList,\n            navigateTo: this.navigateTo,\n            logout: this.logout\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 19\n          }, this)\n        }, void 0, false);\n      // Page Admin (Admin) \n\n      case 'Admin':\n        // Retourner le composant Admin (Admin = module) (userLogged = objet) (navigateTo = fonction) (logout = fonction)\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Admin, {\n            userLogged: userLogged,\n            tasksList: tasksList,\n            navigateTo: this.navigateTo,\n            logout: this.logout\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 19\n          }, this)\n        }, void 0, false);\n      // Page par défaut (Home)\n\n      default:\n        break;\n      // Ne rien faire (break = fin de la boucle)\n    }\n  } // Rendu du composant Home (render = fonction)\n\n\n  render() {\n    // Récuperation des données du composant Home (isLoading, curPage, userLogged) (state = objet)\n    const {\n      isLoading,\n      curPage,\n      userLogged\n    } = this.state; // Si le composant est en cours de chargement (isLoading = true)\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        children: userLogged ? /*#__PURE__*/_jsxDEV(Avatar, {\n          dataUser: userLogged,\n          isClickable: true,\n          navigateTo: this.navigateTo,\n          logout: this.logout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 23\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }, this), !isLoading && curPage ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"        \", this.setComponent(), \"             \"]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }, this)\n      }, void 0, false)]\n    }, void 0, true);\n  }\n\n}","map":{"version":3,"names":["React","axios","App","Avatar","Articles","Loader","Profile","Admin","Home","Component","constructor","props","state","articles","userLogged","tasksList","isLoading","curPage","taskUrl","navigateTo","bind","logout","componentDidMount","getTasks","curTaskId","setState","tasks","get","then","res","data","forEach","task","index","id","curPosTask","event","myPage","target","window","confirm","sessionStorage","clear","ReloadApp","setComponent","render"],"sources":["C:/Users/Fd-Formation/Desktop/Groupomania/front/src/components/Home/Home.js"],"sourcesContent":["import React from \"react\"; // Importer React depuis le répertoire node_modules (React est un module)\nimport axios from \"axios\"; // Importer axios depuis le répertoire node_modules (axios est un module)\nimport App from \"../App\";  // Importer App depuis le répertoire src (./ = src/)\nimport Avatar from \"../Avatar/Avatar\"; // Importer Avatar depuis le répertoire src (./ = src/)\nimport Articles from \"../Articles/Articles\"; // Importer Articles depuis le répertoire src (./ = src/)\nimport Loader from \"../Loader/Loader\"; // Importer Loader depuis le répertoire src (./ = src/)\nimport Profile from \"../Profile/Profile\"; // Importer Profile depuis le répertoire src (./ = src/)\nimport Admin from \"../Admin/Admin\"; // Importer Admin depuis le répertoire src (./ = src/) \nimport \"./Home.css\"; // Importer le fichier CSS depuis le répertoire src (./ = src/)\n\n// Exporter le composant Home (export default)\nexport default class Home extends React.Component {\n  constructor(props) {   // Constructeur du composant Home\n    super(props);        // Appel du constructeur du composant parent (React.Component)\n    this.state = {       // Définition du state du composant Home\n      // Données de l'utilisateur connecté.\n      articles: props.articles,      // Liste des articles de l'utilisateur connecté.\n      userLogged: props.userLogged,  // Utilisateur connecté (objet) à partir du state du composant App.\n      tasksList: null,               // Liste des emplois de l'utilisateur connecté (objet) (à récuperér dans le state)\n      // Option de la page actuelle (Home, Profile, Admin).\n      isLoading: false,              // Indicateur de chargement (à récuperér dans le state) (true = chargement en cours)\n      curPage: 'Home'                // Page actuelle (Home, Profile, Admin)  (à récuperér dans le state) (Home = page d'accueil)\n    }\n    // Url de récuperation des tâches de l'utilisateur connecté.\n    this.taskUrl = 'http://localhost:8080/api/tasks';\n    // OnClick du composant Home (navigateTo) (navigateTo = fonction)  \n    this.navigateTo = this.navigateTo.bind(this);\n    // OnClick du composant Home (logout) (logout = fonction)   \n    this.logout = this.logout.bind(this);\n  }\n\n  // Fonction appelée après le rendu du composant (componentDidMount = fonction)\n  componentDidMount() {\n    this.getTasks(); // Récuperation des tâches de l'utilisateur connecté.\n  }\n\n  // Fonction récuperant les tâches de l'utilisateur connecté.\n  async getTasks() {\n    const { curTaskId } = this.state; // Récuperation de l'id de la tâche en cours (curTaskId)\n    this.setState({ isLoading: true }); // Mise en place du loader (isLoading)\n    // Récuperation des tâches de l'utilisateur connecté (res = objet) (await = attendre) (axios = module) (this.taskUrl = url)\n    let tasks = await axios.get(this.taskUrl).then((res) => {\n      // Pour chaque tâche de l'utilisateur connecté (task = objet) (index = entier) (tasks = tableau)\n      res.data.tasks.forEach((task, index) => {\n        // Si l'id de la tâche en cours est égal à l'id de la tâche récuperée (curTaskId)\n        if (task.id === curTaskId) this.setState({ curPosTask: index });\n      });\n      // Retourner le tableau des tâches de l'utilisateur connecté (tasks = tableau)\n      return res.data.tasks;\n    })\n    // Mise en place du tableau des tâches de l'utilisateur connecté (tasksList = tableau) (isLoading = false)\n    this.setState({ tasksList: tasks, isLoading: false });\n  }\n\n  // Modification de la page à afficher (curPage)\n  navigateTo(event) {\n    const myPage = event.target.id; // Récuperation de l'id de la page à afficher (myPage)\n    this.setState({ curPage: myPage }); // Mise en place de la page à afficher (curPage)\n  }\n\n  // Déconnexion de l'utilisateur connecté (logout = fonction)\n  logout() {\n    if (window.confirm('Vous êtes sur le point de vous déconnectez...\\nÊtes vous sûre ?')) {\n      sessionStorage.clear(); // Suppression de la session utilisateur (sessionStorage = objet) (clear = fonction) \n      App.ReloadApp(); // Rechargement de la page (App = module) (ReloadApp = fonction)\n    }\n  }\n\n  // Mise en place du composant selon la page actuelle. (curPage)\n  setComponent() {\n    // Récuperation des données du composant Home (curPage, articles, tasksList, userLogged) (state = objet)\n    const { curPage, articles, tasksList, userLogged } = this.state;\n    // Switch sur la page actuelle (curPage)\n    switch (curPage) {\n      // Page d'accueil (Home)\n      case 'Home':\n        // Retourner le composant Articles (Articles = module) (articles = tableau) (userLogged = objet) (navigateTo = fonction) (logout = fonction)\n        return (<><Articles articles={articles} userLogged={userLogged} navigateTo={this.navigateTo} logout={this.logout} /></>);\n      // Page Profil (Profile)\n      case 'Profile':\n        // Retourner le composant Profile (Profile = module) (userLogged = objet) (navigateTo = fonction) (logout = fonction)\n        return (<><Profile userLogged={userLogged} tasksList={tasksList} navigateTo={this.navigateTo} logout={this.logout} /></>);\n      // Page Admin (Admin) \n      case 'Admin':\n        // Retourner le composant Admin (Admin = module) (userLogged = objet) (navigateTo = fonction) (logout = fonction)\n        return (<><Admin userLogged={userLogged} tasksList={tasksList} navigateTo={this.navigateTo} logout={this.logout} /></>);\n      // Page par défaut (Home)\n      default:\n        break; // Ne rien faire (break = fin de la boucle)\n    }\n  }\n\n  // Rendu du composant Home (render = fonction)\n  render() {\n    // Récuperation des données du composant Home (isLoading, curPage, userLogged) (state = objet)\n    const { isLoading, curPage, userLogged } = this.state;\n    // Si le composant est en cours de chargement (isLoading = true)\n    return (<>\n      <nav>\n        {/*Si l'utilisateur est connecté (userLogged = objet) (isClickable = true) (navigateTo = fonction) (logout = fonction)*/}\n        {userLogged ? <Avatar dataUser={userLogged} isClickable={true} navigateTo={this.navigateTo} logout={this.logout} /> : null}\n      </nav>\n\n      {!isLoading && curPage ? (<>        {/*Si le composant n'est pas en cours de chargement (isLoading = false)*/}\n        {this.setComponent()}             {/*Mise en place du composant selon la page actuelle (curPage)*/}\n      </>) : (<><Loader /></>)}\n\n    </>)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}