{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fd-Formation\\\\Desktop\\\\Groupomania\\\\front\\\\src\\\\components\\\\Log\\\\Log.js\";\nimport React from \"react\"; // Importer React pour utiliser les fonctionnalités de React dans le code JavaScript\n\nimport axios from \"axios\"; // Importer axios pour utiliser les fonctionnalités de axios pour les requêtes HTTP\n\nimport App from \"../App\"; // Importer App pour afficher la page d'accueil de l'application\n\nimport \"./Log.css\"; // Importer le fichier CSS pour la page de connexion de l'application\n// Création de la classe Log pour la page de connexion de l'application\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class Log extends React.Component {\n  constructor(props) {\n    // Constructeur de la classe Log\n    super(props); // Appel du constructeur de la classe parente (React.Component)\n\n    this.state = {\n      // Définition du state de la classe Log\n      isLoading: false,\n      // Active pour toutes les requêtes HTTP\n      curPage: 'Login' // Page actuelle de la classe Log\n\n    };\n    this.navigateTo = this.navigateTo.bind(this); // Définition de la fonction navigateTo pour changer de page de la classe Log\n  } // Modification de la page à afficher (curPage) en fonction de l'id de la page cliquée.\n\n\n  navigateTo(event) {\n    const myPage = event.target.value; // Récupération de l'id de la page cliquée\n\n    this.setState({\n      curPage: myPage\n    }); // Modification de la page actuelle de la classe Log\n  } // Mise en place du composant selon la page actuelle. (curPage)\n\n\n  setComponent() {\n    const {\n      curPage\n    } = this.state; // Récupération de la page actuelle de la classe Log\n\n    switch (curPage) {\n      // Switch sur la page actuelle de la classe Log\n      case 'Login':\n        // Si la page actuelle de la classe Log est la page de connexion (Login)\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Login, {\n            navigateTo: this.navigateTo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 19\n          }, this)\n        }, void 0, false);\n      // Mise en place du composant Login\n\n      case 'Register':\n        // Si la page actuelle de la classe Log est la page d'inscription (Register)\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Register, {\n            navigateTo: this.navigateTo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 19\n          }, this)\n        }, void 0, false);\n      // Mise en place du composant Register\n\n      default:\n        // Sinon (par défaut)\n        break;\n      // Pas de changement de page de la classe Log (par défaut)\n    }\n  } // Fonction render de la classe Log (affichage de la page de connexion de l'application)\n\n\n  render() {\n    const {\n      isLoading\n    } = this.state; // Récupération de l'état de la classe Log (isLoading)\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\"                    \", !isLoading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"           \", this.setComponent(), \"     \"]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n    }, void 0, true);\n  }\n\n} // Fin de la classe Log \n// Mise en place du composant Login pour la page de connexion de l'application\n\nclass Login extends React.Component {\n  constructor(props) {\n    // Constructeur de la classe Login\n    super(props); // Appel du constructeur de la classe parente (React.Component)\n\n    this.state = {\n      // Définition du state de la classe Login\n      // ENTRÉES DE VALEURS DES INPUTS DE LA PAGE DE CONNEXION DE L'APPLICATION\n      valueEmail: '',\n      // Adresse Email de l'utilisateur\n      valuePassword: '',\n      // Mot de passe de l'utilisateur\n      // FORMULAIRE VALABLE OU PAS, [Email, Mot de passe]     \n      inputValid: [false, false],\n      // Inputs valides ou non\n      validForm: true,\n      // Formulaire valide ou non\n      // OPTIONS DE LA PAGE DE CONNEXION DE L'APPLICATION\n      isLoading: false,\n      // Chargement de la page de connexion de l'application (true/false)            \n      inAction: false,\n      // Action en cours (true/false)               \n      error: '' // Erreur de connexion (message d'erreur)\n\n    }; // URL de récupération des données de l'utilisateur (API) (localhost:8080/api/user)\n\n    this.userUrl = 'http://localhost:8080/api/user'; // URL de connexion de l'utilisateur (authentification) (localhost:8080/api/auth)\n\n    this.authUrl = 'http://localhost:8080/api/auth/login'; // OnClick de la page de connexion de l'application (navigateTo) (Login) (localhost:8080/api/auth)\n\n    this.postLogin = this.postLogin.bind(this); // Définition de la fonction postLogin pour la page de connexion de l'app.\n\n    this.OnChange = this.OnChange.bind(this); // Définition de la fonction OnChange pour la page de connexion de l'app.\n  } // Requête d'authentification de l'utilisateur (POST) (localhost:8080/api/auth)\n\n\n  async postLogin(event) {\n    // Fonction postLogin pour la page de connexion de l'app.\n    event.preventDefault(); // Empêche le rechargement de la page lors du clic sur le bouton de connexion de l'application\n    // Modification du state de la classe Login (validForm, inAction, error)\n    // pour afficher le chargement de la page de connexion de l'application\n\n    this.setState({\n      validForm: true,\n      inAction: true,\n      error: ''\n    }); // Récupération des valeurs des inputs de la page de connexion de l'application, (valueEmail, valuePassword)\n\n    const {\n      valueEmail,\n      valuePassword\n    } = this.state;\n    const dataPost = {\n      // Définition des données de la requête POST\n      email: valueEmail,\n      // Adresse Email de l'utilisateur\n      password: valuePassword // Mot de passe de l'utilisateur\n\n    }; // Post request de la requête d'authentification de l'utilisateur (POST) (localhost:8080/api/auth)\n\n    await axios.post(this.authUrl, dataPost).then(res => {\n      this.setToken(res.data.token); // Définition du token de l'utilisateur (res.data.token)\n      // Définition de l'URL de récupération des données de l'utilisateur (API) (localhost:8080/api/user)\n\n      const getUserUrl = this.userUrl + '?id=' + res.data.userId; // Récupération des données de l'utilisateur (API) (localhost:8080/api/user)\n\n      axios.get(getUserUrl).then(user => {\n        // Modification du state de la classe Log (userLogged, inAction, curPage) pour afficher la page d'accueil de l'application (Home)\n        this.setState({\n          userLogged: user.data.user,\n          inAction: false,\n          curPage: 'Home'\n        });\n        App.ReloadApp(); // Rafraichissement de la page de l'application\n      }) // Si une erreur est survenue (localhost:8080/api/user)\n      .catch(_error => {\n        console.warn('ERROR'); // Modification du state de la classe Log (error, inAction) pour afficher le message d'erreur de connexion de l'app.\n\n        this.setState({\n          userLogged: null,\n          validForm: false,\n          inAction: false,\n          error: 'Erreur interne!'\n        });\n      });\n    }).catch(err => {\n      console.error('Erreur de demande de connexion !');\n      console.log(err.reason); // Affichage de l'erreur de connexion de l'utilisateur\n      // Modification du state de la classe Log (error, inAction) pour afficher le message d'erreur de connexion de l'app.\n\n      this.setState({\n        userLogged: null,\n        validForm: false,\n        inAction: false,\n        error: 'Adresse Email / Mot de passe incorrect!'\n      });\n    });\n  } // Pour tout changement apporter aux inputs de la page de connexion de l'application (OnChange)\n\n\n  OnChange(event) {\n    const myCase = event.target.name; // Récupération du nom de l'input (myCase)\n\n    switch (myCase) {\n      // Switch sur le nom de l'input (myCase)\n      case 'email':\n        // Si le nom de l'input est email (myCase)\n        // Appel de la fonction checkForm pour vérifier la validité des inputs de la page de connexion de l'application\n        this.checkForm(event.target);\n        this.setState({\n          valueEmail: event.target.value\n        }); // Définition de la valeur de l'input email (valueEmail)\n\n        break;\n      // Fin du switch\n\n      case 'password':\n        // Si le nom de l'input est password (myCase)\n        // Appel de la fonction checkForm pour vérifier la validité des inputs de la page de connexion de l'application\n        this.checkForm(event.target); // Définition de la valeur de l'input password (valuePassword)\n\n        this.setState({\n          valuePassword: event.target.value\n        });\n        break;\n      // Fin du switch\n\n      default:\n        // Si le nom de l'input n'est pas email ou password (myCase) (default)\n        // Affichage d'un message d'erreur pour le nom de l'input\n        console.error('Nothing here!');\n        break;\n      // Fin du switch \n    }\n  } // Verification des inputs valides de la page de connexion de l'application (checkForm)\n\n\n  checkForm(target) {\n    const {\n      inputValid\n    } = this.state; // Récupération du state de la classe Login (inputValid)\n\n    const inputName = target.name; // Récupération du nom de l'input (inputName)\n\n    let inputs = [...inputValid]; // Récupération du state de la classe Login (inputValid)\n\n    let pos = 0; // Définition de la position de l'input (pos) (0) pour la première position de l'input (inputValid)\n\n    switch (inputName) {\n      // Switch sur le nom de l'input (inputName) (email, password)\n      default:\n        // Si le nom de l'input n'est pas email ou password (inputName) (default)\n        console.error('Nom de champ inconnu !');\n        break;\n\n      case 'email':\n        // Email\n        let regEmail = new RegExp(/^[a-zA-Z0-9.-]+@[a-zA-Z0-9.-]+(\\.[a-zA-Z]{2,})/g); // Regex pour email valide (avec @ et .).\n\n        pos = 0; // Position du champ dans le tableau inputValid (email).\n\n        if (!target.value.match(regEmail)) {\n          // Si l'email n'est pas valide (pas de @ et pas de .) alors erreur.\n          // Changer le style et le message d'erreur pour le champ email (inputValid[0]) et le formulaire (validForm).\n          target.className = \"error\";\n          inputs[pos] = false; // Champ email invalide.\n\n          this.setState({\n            inputValid: inputs\n          }); // Mise à jour du tableau inputValid.\n        } else {\n          // Changer le  style et le message d'erreur pour le champ email (inputValid[0]) et le formulaire (validForm).\n          target.className = \"valid\";\n          inputs[pos] = true; // Champ email valide.\n\n          this.setState({\n            inputValid: inputs\n          }); // Mise à jour du tableau inputValid.\n        }\n\n        break;\n      // Fin de l'email.\n\n      case 'password':\n        // Le mot de passe.\n        pos = 1; // Position du champ password dans le tableau inputValid\n\n        if (target.value.length >= 4) {\n          // Minimum 4 caractères pour le mot de passe (en plus de l'@mail)\n          // Modifie le style et définit la forme valide sur true si toutes les entrées sont valides (true).\n          target.className = \"valid\";\n          inputs[pos] = true; // Champ password valide.\n\n          this.setState({\n            inputValid: inputs\n          }); // Mise à jour du tableau inputValid.\n        } else {\n          // Changer le style et le message d'erreur si le mot de passe n'est pas valide\n          target.className = \"error\";\n          inputs[pos] = false; // Champ password invalide.\n          // Change la valeur du tableau inputValid pour le champ password\n\n          this.setState({\n            inputValid: inputs\n          }); // Mise à jour du tableau inputValid.\n        } // Si le mot de passe est vide, on change le style et le message d'erreur.\n\n\n        if (target.value.length === 0) {\n          // Changer le style et le message d'erreur pour le champ password (inputValid[1]) et le formulaire (validForm).\n          target.className = \"\";\n          inputs[pos] = true; // Champ password valide.\n\n          this.setState({\n            inputValid: inputs\n          }); // Mise à jour du tableau inputValid.\n        }\n\n        ;\n        break;\n      // Fin du cas password.\n    }\n\n    if (inputs.every(element => element === true)) this.setState({\n      validForm: false\n    });else this.setState({\n      validForm: true\n    });\n  } // Insertion du jeton dans la session storage du navigateur (pour la suite) et redirection vers la page d'accueil.\n\n\n  setToken(userToken) {\n    sessionStorage.setItem('token', JSON.stringify(userToken));\n  } //  page de connexion de l'utilisateur (Login) et de son profil (Home)  \n\n\n  render() {\n    const {\n      isLoading,\n      validForm,\n      error\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: !isLoading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"login\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa-solid fa-user-lock\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 15\n            }, this), \" Connectez-vous !\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 11\n          }, this), error || error !== '' ? /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 36\n          }, this) : null, \" \", /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: this.postLogin,\n            disabled: validForm,\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"Email\",\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"Email\",\n              name: \"email\",\n              type: \"email\",\n              placeholder: \"Ex : example@groupomania.com\",\n              onChange: this.OnChange,\n              label: \"Adresse email\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 13\n            }, this), \"      \", /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"Password\",\n              children: \"Mot de passe\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 13\n            }, this), \"                  \", /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"Password\",\n              name: \"password\",\n              type: \"password\",\n              placeholder: \"mot de passe\",\n              onChange: this.OnChange,\n              label: \"Mot de passe\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"submit\",\n              disabled: validForm,\n              label: \"Connexion\",\n              value: \"Connexion\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 13\n            }, this), \"      \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sign\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Vous n'\\xEAtes pas encore membre ?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 11\n          }, this), \"  \", /*#__PURE__*/_jsxDEV(\"button\", {\n            value: 'Register',\n            onClick: this.props.navigateTo,\n            children: \"Inscription\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 11\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n    }, void 0, false);\n  }\n\n} // Page d'inscription de l'utilisateur (Register) et de son profil (Home)\n\n\nclass Register extends React.Component {\n  constructor(props) {\n    // Constructeur de la classe Register (page d'inscription)\n    super(props); // Appel du constructeur de la classe parente (React.Component)\n\n    this.state = {\n      // Initialisation des variables de la classe Register\n      valueFirst: '',\n      // Valeur du champ firstName (prénom)\n      valueLast: '',\n      // Valeur du champ lastName (nom de famille)\n      valueEmail: '',\n      // Valeur du champ email (adresse email)\n      valuePassword: '',\n      // Valeur du champ password (mot de passe)\n      // Formulaire valide ou non (true ou false) [prénom, nom, email, mot de passe]\n      inputValid: [false, false, false, false],\n      validForm: true,\n      // Formulaire valide ou non (true ou false)\n      isLoading: false,\n      // Chargement du formulaire (true ou false) (pour afficher le loader)\n      inAction: false,\n      // Action en cours (true ou false) (pour afficher le loader)\n      error: '' // Error message (si erreur)\n\n    };\n    this.userUrl = 'http://localhost:8080/api/user'; // Url de l'API pour les utilisateurs (inscription)\n\n    this.signUrl = 'http://localhost:8080/api/auth/sign'; // Url de l'API pour les connexions (connexion)\n\n    this.postLogin = this.postLogin.bind(this); // Appel de la fonction postLogin (connexion) via le this (this = Register)\n\n    this.OnChange = this.OnChange.bind(this); // Appel de la fonction OnChange (changement d'input) via le this (this = Register)\n  } // Requête d'inscription de l'utilisateur (inscription)\n\n\n  async postLogin(event) {\n    // Appel de la fonction postLogin (connexion) via le this (this = Register)\n    event.preventDefault(); // Annulation de l'action par défaut du formulaire\n\n    this.setState({\n      validForm: true,\n      inAction: true\n    }); // Changement du formulaire en cours (true) et du loader en cours (true) (pour afficher le loader)\n\n    const {\n      valueFirst,\n      valueLast,\n      valueEmail,\n      valuePassword\n    } = this.state; // Récupération des valeurs des champs du formulaire (prénom, nom, email, mot de passe)\n\n    const dataPost = {\n      // Création de l'objet JSON pour la requête d'inscription (inscription)\n      firstname: valueFirst,\n      // Prénom de l'utilisateur (prénom)\n      lastname: valueLast,\n      // Nom de famille de l'utilisateur (nom de famille)\n      email: valueEmail,\n      // Adresse email de l'utilisateur (adresse email)\n      password: valuePassword // Mot de passe de l'utilisateur (mot de passe)\n\n    }; // Publier la demande d'inscription (inscription) à l'API (inscription) et récupérer la réponse (inscription) \n\n    await axios.post(this.signUrl, dataPost).then(res => {\n      this.setToken(res.data.token); // Insertion du jeton dans la session storage du navigateur (pour la suite) (inscription)\n\n      const getUserUrl = this.userUrl + '?id=' + res.data.userId; // Création de l'url de la requête de récupération du profil de l'utilisateur (inscription)\n\n      axios.get(getUserUrl).then(user => {\n        // Publier la demande de récupération du profil de l'utilisateur (inscription) à l'API (inscription) et récupérer la réponse (inscription)\n        this.setState({\n          userLogged: user.data.user,\n          inAction: false,\n          curPage: 'Home'\n        }); // Changement de la page en cours (Home) (inscription) et du loader en cours (false) (pour cacher le loader) (inscription)\n\n        App.ReloadApp(); // Rafraichissement de la page (inscription)\n      }).catch(_error => {\n        // Si erreur (inscription)  \n        console.warn('ERROR'); // Affichage d'un message d'erreur (inscription)\n        // Changement de la page en cours (Home) (inscription) et du loader en cours (false) (pour cacher le loader) (inscription) et affichage du message d'erreur (inscription)\n\n        this.setState({\n          userLogged: null,\n          validForm: false,\n          inAction: false,\n          error: 'Erreur interne!'\n        });\n      });\n    }).catch(err => {\n      // Si erreur (inscription)\n      console.error('Erreur de demande de connexion !'); // Affichage d'un message d'erreur (inscription)\n\n      console.log(err); // Affichage de l'erreur (inscription) (pour débug) \n      // Changement de la page en cours (Home) (inscription) et du loader en cours (false) (pour cacher le loader) (inscription) et affichage du message d'erreur (inscription)\n\n      this.setState({\n        userLogged: null,\n        validForm: false,\n        inAction: false,\n        error: 'Adresse Email déjà existante!'\n      });\n    });\n  } // Changement de la valeur d'un champ du formulaire (changement d'input) \n\n\n  OnChange(event) {\n    const myCase = event.target.name; // Récupération du nom du champ (changement d'input)\n\n    switch (myCase) {\n      // Switch sur le nom du champ (changement d'input) (prénom, nom, email, mot de passe)\n      case 'firstname':\n        // Si le champ est prénom (changement d'input) (prénom)\n        this.checkForm(event.target); // Appel de la fonction checkForm (changement d'input) (prénom)\n\n        this.setState({\n          valueFirst: event.target.value\n        }); // Changement de la valeur du champ (changement d'input) (prénom)\n\n        break;\n      // Sortie de la condition (changement d'input) (prénom)\n\n      case 'lastname':\n        // Si le champ est nom de famille (changement d'input) (nom de famille)\n        this.checkForm(event.target); // Appel de la fonction checkForm (changement d'input) (nom de famille)\n\n        this.setState({\n          valueLast: event.target.value\n        }); // Changement de la valeur du champ (changement d'input) (nom de famille) \n\n        break;\n      // Sortie de la condition (changement d'input) (nom de famille)\n\n      case 'email':\n        // Si le champ est email (changement d'input) (email)\n        this.checkForm(event.target); // Appel de la fonction checkForm (changement d'input) (email)\n\n        this.setState({\n          valueEmail: event.target.value\n        }); // Changement de la valeur du champ (changement d'input) (email)\n\n        break;\n      // Sortie de la condition (changement d'input) (email)\n\n      case 'password':\n        // Si le champ est mot de passe (changement d'input) (mot de passe)\n        this.checkForm(event.target); // Appel de la fonction checkForm (changement d'input) (mot de passe)\n\n        this.setState({\n          valuePassword: event.target.value\n        }); // Changement de la valeur du champ (changement d'input) (mot de passe)\n\n        break;\n      // Sortie de la condition (changement d'input) (mot de passe)\n\n      default:\n        // Si le champ n'est pas prénom, nom de famille, email ou mot de passe (changement d'input) (autre champ) \n        console.error('Rien ici!'); // Affichage d'un message d'erreur Rien ici (changement d'input) (autre champ)\n\n        break;\n      // Sortie de la condition (changement d'input) (autre champ)\n    }\n  } // Verification des inputs valides (changement d'input) (prénom, nom, email, mot de passe)\n\n\n  checkForm(target) {\n    const {\n      inputValid\n    } = this.state; // Récupération de l'état de l'input (changement d'input) (prénom, nom, email, mot de passe)\n\n    const inputName = target.name; // Récupération du nom du champ (changement d'input) (prénom, nom, email, mot de passe)\n\n    let inputs = [...inputValid]; // Création d'un nouveau tableau avec les valeurs de inputValid (changement d'input) (prénom, nom, email, mot de passe)\n\n    let pos = 0; // Création d'une variable de position (changement d'input) (prénom, nom, email, mot de passe) (0)\n\n    switch (inputName) {\n      // Switch sur le nom du champ (changement d'input) (prénom, nom, email, mot de passe)\n      default:\n        // Si le champ n'est pas prénom, nom de famille, email ou mot de passe (changement d'input) (autre champ)\n        console.error('Nom de champ inconnu!'); // Affichage d'un message d'erreur Nom de champ inconnu (changement d'input) (autre champ)\n\n        break;\n      // Sortie de la condition (changement d'input) (autre champ)\n\n      case 'firstname': // Si le champ est prénom (changement d'input) (prénom)\n\n      case 'lastname':\n        // Si le champ est nom de famille (changement d'input) (nom de famille)\n        pos = 0; // Changement de la valeur de la variable de position (changement d'input) (prénom, nom de famille) (0) \n\n        if (inputName === 'lastname') pos = 1; // Si le champ est nom de famille (changement d'input) (nom de famille) (1)  \n\n        if (target.value.length >= 2) {\n          // Si la longueur du champ est supérieure ou égale à 2 (changement d'input) (prénom, nom de famille) (2)\n          target.className = \"valid\"; // Changement du style du champ (changement d'input) (prénom, nom de famille) (valid)\n\n          inputs[pos] = true; // Changement de la valeur de l'input (changement d'input) (prénom, nom de famille) (true)\n\n          this.setState({\n            inputValid: inputs\n          }); // Changement de l'état de l'input (changement d'input) (prénom, nom de famille)\n        } else {\n          target.className = \"error\"; // Changement du style du champ (changement d'input) (prénom, nom de famille) (error)\n\n          inputs[pos] = false; // Changement de la valeur de l'input (changement d'input) (prénom, nom de famille) (false)\n\n          this.setState({\n            inputValid: inputs\n          }); // Changement de l'état de l'input (changement d'input) (prénom, nom de famille)\n        }\n\n        break;\n      // Sortie de la condition (changement d'input) (prénom, nom de famille)\n\n      case 'email':\n        // Si le champ est email (changement d'input) (email)\n        // Expression régulière pour vérifier si l'email est valide (changement d'input) (email) (regExp)\n        let regEmail = new RegExp(/^[a-zA-Z0-9.-]+@[a-zA-Z0-9.-]+(\\.[a-zA-Z]{2,})/g);\n        pos = 2; // Changement de la valeur de la variable de position (changement d'input) (email) (2) \n\n        if (!target.value.match(regEmail)) {\n          // Si l'email n'est pas valide (changement d'input) (email) (match) (regExp)\n          target.className = \"error\"; // Changement du style du champ (changement d'input) (email) (error)\n\n          inputs[pos] = false; // Changement de la valeur de l'input (changement d'input) (email) (false)\n\n          this.setState({\n            inputValid: inputs\n          }); // Changement de l'état de l'input (changement d'input) (email)\n        } else {\n          target.className = \"valid\"; // Changement du style du champ (changement d'input) (email) (valid)\n\n          inputs[pos] = true; // Changement de la valeur de l'input (changement d'input) (email) (true)\n\n          this.setState({\n            inputValid: inputs\n          }); // Changement de l'état de l'input (changement d'input) (email)\n        }\n\n        break;\n      // Sortie de la condition (changement d'input) (email)\n\n      case 'password':\n        // Si le champ est mot de passe (changement d'input) (mot de passe)\n        pos = 3; // Changement de la valeur de la variable de position (changement d'input) (mot de passe) (3)\n\n        if (target.value.length >= 4) {\n          // Si la longueur du champ est supérieure ou égale à 4 (changement d'input) (mot de passe) (4)\n          target.className = \"valid\"; // Changement du style du champ (changement d'input) (mot de passe) (valid)\n\n          inputs[pos] = true; // Changement de la valeur de l'input (changement d'input) (mot de passe) (true)\n\n          this.setState({\n            inputValid: inputs\n          }); // Changement de l'état de l'input (changement d'input) (mot de passe)\n        } else {\n          target.className = \"error\"; // Changement du style du champ (changement d'input) (mot de passe) (error)\n\n          inputs[pos] = false; // Changement de la valeur de l'input (changement d'input) (mot de passe) (false)\n\n          this.setState({\n            inputValid: inputs\n          }); // Changement de l'état de l'input (changement d'input) (mot de passe)\n        }\n\n        if (target.value.length === 0) {\n          // Si la longueur du champ est égale à 0 (changement d'input) (mot de passe) (0)  \n          target.className = \"\"; // Changement du style du champ (changement d'input) (mot de passe) ()\n\n          inputs[pos] = true; // Changement de la valeur de l'input (changement d'input) (mot de passe) (true)\n\n          this.setState({\n            inputValid: inputs\n          }); // Changement de l'état de l'input (changement d'input) (mot de passe)\n        }\n\n        ;\n        break;\n      // Sortie de la condition (changement d'input) (mot de passe)\n    }\n\n    if (inputs.every(element => element === true)) // Si tous les inputs sont valides (changement d'input) (tous les inputs) (every)\n      this.setState({\n        validForm: false\n      }); // Changement de l'état du formulaire (changement d'input) (tous les inputs) (false)\n    else this.setState({\n      validForm: true\n    }); // Changement de l'état du formulaire (changement d'input) (tous les inputs) (true)\n  } // Fonction qui permet de stocker le jeton dans la session (changement d'input) (jeton) (sessionStorage)\n\n\n  setToken(userToken) {\n    sessionStorage.setItem('token', JSON.stringify(userToken)); // Stocke le jeton dans la session (changement d'input) (jeton) (sessionStorage)\n  }\n\n  render() {\n    // Fonction qui permet de rendre le composant (rendu)\n    const {\n      isLoading,\n      validForm,\n      error\n    } = this.state; // Déclaration des variables (rendu) (isLoading, validForm, error) \n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\"      \", !isLoading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"login\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa-solid fa-door-open\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 15\n            }, this), \" Inscrivez-vous !\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 11\n          }, this), \" \", error || error !== '' ? /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 36\n          }, this) : null, \" \", /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: this.postLogin,\n            disabled: validForm,\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"Prenom\",\n              children: \"Pr\\xE9nom\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 13\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"Prenom\",\n              name: \"firstname\",\n              type: \"text\",\n              placeholder: \"Pr\\xE9nom\" // Input (rendu) (isLoading) (validForm) (Prenom)\n              ,\n              label: \"Pr\\xE9nom\",\n              onChange: this.OnChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 13\n            }, this), \"  \", /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"Nom\",\n              children: \"Nom\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 13\n            }, this), \"  \", /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"Nom\",\n              name: \"lastname\",\n              type: \"text\",\n              placeholder: \"Nom\" // Input (rendu) (isLoading) (validForm) (Nom)\n              ,\n              label: \"Nom\",\n              onChange: this.OnChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 13\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"Email\",\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 13\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"Email\",\n              name: \"email\",\n              type: \"email\",\n              placeholder: \"Ex : example@groupomania.com\" // Input (rendu) (isLoading) (validForm) (Email)\n              ,\n              label: \"Adresse email\",\n              onChange: this.OnChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 13\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"Password\",\n              children: \"Mot de passe\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 13\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"Password\",\n              name: \"password\",\n              type: \"password\",\n              placeholder: \"mot de passe\" // Input (rendu) (isLoading) (validForm) (Password)\n              ,\n              label: \"Mot de passe\",\n              onChange: this.OnChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"submit\",\n              disabled: validForm,\n              label: \"Inscription\",\n              value: \"Inscription\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 13\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sign\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Vous \\xEAtes d\\xE9j\\xE0 membre ?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 11\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n            value: 'Login',\n            onClick: this.props.navigateTo,\n            children: \"Connexion\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 11\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n    }, void 0, true);\n  }\n\n}","map":{"version":3,"names":["React","axios","App","Log","Component","constructor","props","state","isLoading","curPage","navigateTo","bind","event","myPage","target","value","setState","setComponent","render","Login","valueEmail","valuePassword","inputValid","validForm","inAction","error","userUrl","authUrl","postLogin","OnChange","preventDefault","dataPost","email","password","post","then","res","setToken","data","token","getUserUrl","userId","get","user","userLogged","ReloadApp","catch","_error","console","warn","err","log","reason","myCase","name","checkForm","inputName","inputs","pos","regEmail","RegExp","match","className","length","every","element","userToken","sessionStorage","setItem","JSON","stringify","Register","valueFirst","valueLast","signUrl","firstname","lastname"],"sources":["C:/Users/Fd-Formation/Desktop/Groupomania/front/src/components/Log/Log.js"],"sourcesContent":["import React from \"react\"; // Importer React pour utiliser les fonctionnalités de React dans le code JavaScript\nimport axios from \"axios\"; // Importer axios pour utiliser les fonctionnalités de axios pour les requêtes HTTP\nimport App from \"../App\"; // Importer App pour afficher la page d'accueil de l'application\nimport \"./Log.css\"; // Importer le fichier CSS pour la page de connexion de l'application\n\n// Création de la classe Log pour la page de connexion de l'application\nexport default class Log extends React.Component {\n  constructor(props) { // Constructeur de la classe Log\n    super(props); // Appel du constructeur de la classe parente (React.Component)\n    this.state = { // Définition du state de la classe Log\n      isLoading: false, // Active pour toutes les requêtes HTTP\n      curPage: 'Login' // Page actuelle de la classe Log\n    }\n    this.navigateTo = this.navigateTo.bind(this); // Définition de la fonction navigateTo pour changer de page de la classe Log\n  }\n\n  // Modification de la page à afficher (curPage) en fonction de l'id de la page cliquée.\n  navigateTo(event) {\n    const myPage = event.target.value; // Récupération de l'id de la page cliquée\n    this.setState({ curPage: myPage }); // Modification de la page actuelle de la classe Log\n  }\n\n  // Mise en place du composant selon la page actuelle. (curPage)\n  setComponent() {\n    const { curPage } = this.state; // Récupération de la page actuelle de la classe Log\n    switch (curPage) { // Switch sur la page actuelle de la classe Log\n      case 'Login': // Si la page actuelle de la classe Log est la page de connexion (Login)\n        return (<><Login navigateTo={this.navigateTo} /></>); // Mise en place du composant Login\n      case 'Register': // Si la page actuelle de la classe Log est la page d'inscription (Register)\n        return (<><Register navigateTo={this.navigateTo} /></>); // Mise en place du composant Register\n      default: // Sinon (par défaut)\n        break; // Pas de changement de page de la classe Log (par défaut)\n    }\n  }\n\n  // Fonction render de la classe Log (affichage de la page de connexion de l'application)\n  render() {\n    const { isLoading } = this.state; // Récupération de l'état de la classe Log (isLoading)\n    return (<>                    {/* Début du composant Log */}\n\n      {!isLoading ? (<>           {/* Début du composant Log */}\n        {this.setComponent()}     {/* Mise en place du composant selon la page actuelle de la classe Log */}\n      </>) : (<></>)}\n\n    </>)\n  }\n}\n// Fin de la classe Log \n\n// Mise en place du composant Login pour la page de connexion de l'application\nclass Login extends React.Component {\n  constructor(props) { // Constructeur de la classe Login\n    super(props); // Appel du constructeur de la classe parente (React.Component)\n    this.state = { // Définition du state de la classe Login\n      // ENTRÉES DE VALEURS DES INPUTS DE LA PAGE DE CONNEXION DE L'APPLICATION\n      valueEmail: '',                 // Adresse Email de l'utilisateur\n      valuePassword: '',              // Mot de passe de l'utilisateur\n\n      // FORMULAIRE VALABLE OU PAS, [Email, Mot de passe]     \n      inputValid: [false, false],     // Inputs valides ou non\n      validForm: true,                // Formulaire valide ou non\n      // OPTIONS DE LA PAGE DE CONNEXION DE L'APPLICATION\n      isLoading: false,               // Chargement de la page de connexion de l'application (true/false)            \n      inAction: false,                // Action en cours (true/false)               \n      error: ''                       // Erreur de connexion (message d'erreur)\n    }\n\n    // URL de récupération des données de l'utilisateur (API) (localhost:8080/api/user)\n    this.userUrl = 'http://localhost:8080/api/user';\n    // URL de connexion de l'utilisateur (authentification) (localhost:8080/api/auth)\n    this.authUrl = 'http://localhost:8080/api/auth/login';\n    // OnClick de la page de connexion de l'application (navigateTo) (Login) (localhost:8080/api/auth)\n    this.postLogin = this.postLogin.bind(this); // Définition de la fonction postLogin pour la page de connexion de l'app.\n    this.OnChange = this.OnChange.bind(this); // Définition de la fonction OnChange pour la page de connexion de l'app.\n  }\n\n  // Requête d'authentification de l'utilisateur (POST) (localhost:8080/api/auth)\n  async postLogin(event) { // Fonction postLogin pour la page de connexion de l'app.\n    event.preventDefault(); // Empêche le rechargement de la page lors du clic sur le bouton de connexion de l'application\n    // Modification du state de la classe Login (validForm, inAction, error)\n    // pour afficher le chargement de la page de connexion de l'application\n    this.setState({ validForm: true, inAction: true, error: '' });\n    // Récupération des valeurs des inputs de la page de connexion de l'application, (valueEmail, valuePassword)\n    const { valueEmail, valuePassword } = this.state;\n    const dataPost = { // Définition des données de la requête POST\n      email: valueEmail, // Adresse Email de l'utilisateur\n      password: valuePassword // Mot de passe de l'utilisateur\n    };\n\n    // Post request de la requête d'authentification de l'utilisateur (POST) (localhost:8080/api/auth)\n    await axios.post(this.authUrl, dataPost).then((res) => {\n      this.setToken(res.data.token); // Définition du token de l'utilisateur (res.data.token)\n\n      // Définition de l'URL de récupération des données de l'utilisateur (API) (localhost:8080/api/user)\n      const getUserUrl = this.userUrl + '?id=' + res.data.userId;\n      // Récupération des données de l'utilisateur (API) (localhost:8080/api/user)\n      axios.get(getUserUrl).then((user) => {\n        // Modification du state de la classe Log (userLogged, inAction, curPage) pour afficher la page d'accueil de l'application (Home)\n        this.setState({ userLogged: user.data.user, inAction: false, curPage: 'Home' });\n        App.ReloadApp(); // Rafraichissement de la page de l'application\n      })\n        // Si une erreur est survenue (localhost:8080/api/user)\n        .catch((_error) => {\n          console.warn('ERROR');\n          // Modification du state de la classe Log (error, inAction) pour afficher le message d'erreur de connexion de l'app.\n          this.setState({ userLogged: null, validForm: false, inAction: false, error: 'Erreur interne!' });\n        });\n    })\n      .catch((err) => {\n        console.error('Erreur de demande de connexion !');\n        console.log(err.reason); // Affichage de l'erreur de connexion de l'utilisateur\n        // Modification du state de la classe Log (error, inAction) pour afficher le message d'erreur de connexion de l'app.\n        this.setState({ userLogged: null, validForm: false, inAction: false, error: 'Adresse Email / Mot de passe incorrect!' });\n      });\n  }\n\n  // Pour tout changement apporter aux inputs de la page de connexion de l'application (OnChange)\n  OnChange(event) {\n    const myCase = event.target.name; // Récupération du nom de l'input (myCase)\n    switch (myCase) { // Switch sur le nom de l'input (myCase)\n      case 'email': // Si le nom de l'input est email (myCase)\n        // Appel de la fonction checkForm pour vérifier la validité des inputs de la page de connexion de l'application\n        this.checkForm(event.target);\n        this.setState({ valueEmail: event.target.value }); // Définition de la valeur de l'input email (valueEmail)\n        break; // Fin du switch\n\n      case 'password': // Si le nom de l'input est password (myCase)\n        // Appel de la fonction checkForm pour vérifier la validité des inputs de la page de connexion de l'application\n        this.checkForm(event.target);\n        // Définition de la valeur de l'input password (valuePassword)\n        this.setState({ valuePassword: event.target.value });\n        break; // Fin du switch\n      default: // Si le nom de l'input n'est pas email ou password (myCase) (default)\n        // Affichage d'un message d'erreur pour le nom de l'input\n        console.error('Nothing here!');\n        break; // Fin du switch \n    }\n  }\n\n  // Verification des inputs valides de la page de connexion de l'application (checkForm)\n  checkForm(target) {\n    const { inputValid } = this.state; // Récupération du state de la classe Login (inputValid)\n    const inputName = target.name; // Récupération du nom de l'input (inputName)\n    let inputs = [...inputValid]; // Récupération du state de la classe Login (inputValid)\n    let pos = 0; // Définition de la position de l'input (pos) (0) pour la première position de l'input (inputValid)\n    switch (inputName) { // Switch sur le nom de l'input (inputName) (email, password)\n      default: // Si le nom de l'input n'est pas email ou password (inputName) (default)\n        console.error('Nom de champ inconnu !');\n        break;\n      case 'email': // Email\n        let regEmail = new RegExp(/^[a-zA-Z0-9.-]+@[a-zA-Z0-9.-]+(\\.[a-zA-Z]{2,})/g); // Regex pour email valide (avec @ et .).\n        pos = 0; // Position du champ dans le tableau inputValid (email).\n        if (!target.value.match(regEmail)) { // Si l'email n'est pas valide (pas de @ et pas de .) alors erreur.\n          // Changer le style et le message d'erreur pour le champ email (inputValid[0]) et le formulaire (validForm).\n          target.className = \"error\";\n          inputs[pos] = false; // Champ email invalide.\n          this.setState({ inputValid: inputs }); // Mise à jour du tableau inputValid.\n        }\n        else {\n          // Changer le  style et le message d'erreur pour le champ email (inputValid[0]) et le formulaire (validForm).\n          target.className = \"valid\";\n          inputs[pos] = true; // Champ email valide.\n          this.setState({ inputValid: inputs }); // Mise à jour du tableau inputValid.\n        }\n        break; // Fin de l'email.\n\n      case 'password': // Le mot de passe.\n        pos = 1; // Position du champ password dans le tableau inputValid\n        if (target.value.length >= 4) { // Minimum 4 caractères pour le mot de passe (en plus de l'@mail)\n          // Modifie le style et définit la forme valide sur true si toutes les entrées sont valides (true).\n          target.className = \"valid\";\n          inputs[pos] = true; // Champ password valide.\n          this.setState({ inputValid: inputs }); // Mise à jour du tableau inputValid.\n        }\n        else {\n          // Changer le style et le message d'erreur si le mot de passe n'est pas valide\n          target.className = \"error\";\n          inputs[pos] = false; // Champ password invalide.\n          // Change la valeur du tableau inputValid pour le champ password\n          this.setState({ inputValid: inputs }); // Mise à jour du tableau inputValid.\n        }\n        // Si le mot de passe est vide, on change le style et le message d'erreur.\n        if (target.value.length === 0) {\n          // Changer le style et le message d'erreur pour le champ password (inputValid[1]) et le formulaire (validForm).\n          target.className = \"\";\n          inputs[pos] = true; // Champ password valide.\n          this.setState({ inputValid: inputs }); // Mise à jour du tableau inputValid.\n        };\n        break; // Fin du cas password.\n    }\n\n    if (inputs.every(element => element === true))\n      this.setState({ validForm: false });\n    else\n      this.setState({ validForm: true });\n  }\n\n  // Insertion du jeton dans la session storage du navigateur (pour la suite) et redirection vers la page d'accueil.\n  setToken(userToken) {\n    sessionStorage.setItem('token', JSON.stringify(userToken));\n  }\n\n  //  page de connexion de l'utilisateur (Login) et de son profil (Home)  \n  render() {\n    const { isLoading, validForm, error } = this.state;\n    return (<>\n\n      {/* Si le formulaire est valide, on peut lancer la requête d'authentification. */}\n      {!isLoading ? (<>\n        <div className='login'>\n          <h2><i className='fa-solid fa-user-lock'></i> Connectez-vous !</h2>\n          {error || error !== '' ? <p className=\"error\">{error}</p> : null} {/* Si erreur, afficher le message d'erreur. */}\n          <form onSubmit={this.postLogin} disabled={validForm}> {/* Si le formulaire est invalide, on ne peut pas lancer la requête d'authentification. */}\n            <label htmlFor=\"Email\">Email</label>\n            <input id=\"Email\" name='email' type='email' placeholder='Ex : example@groupomania.com'\n              onChange={this.OnChange} label='Adresse email' required />      {/* Input email */}\n            <label htmlFor=\"Password\">Mot de passe</label>                  {/* Input password */}\n            <input id=\"Password\" name='password' type='password' placeholder='mot de passe'\n              onChange={this.OnChange} label='Mot de passe' required />\n            <input type='submit' disabled={validForm} label='Connexion' value='Connexion' />      {/* Bouton connexion */}\n          </form>\n        </div>\n\n        {/* Bouton inscription */}\n        <div className=\"sign\">\n          <h3>Vous n'êtes pas encore membre ?</h3>  {/* Si le formulaire est invalide, on affiche le message d'erreur. */}\n          <button value={'Register'} onClick={this.props.navigateTo} >Inscription</button> {/* Bouton inscription */}\n        </div>\n      </>) : (<></>)}\n\n    </>)\n  }\n}\n\n// Page d'inscription de l'utilisateur (Register) et de son profil (Home)\nclass Register extends React.Component {\n  constructor(props) {  // Constructeur de la classe Register (page d'inscription)\n    super(props); // Appel du constructeur de la classe parente (React.Component)\n    this.state = { // Initialisation des variables de la classe Register\n      valueFirst: '', // Valeur du champ firstName (prénom)\n      valueLast: '', // Valeur du champ lastName (nom de famille)\n      valueEmail: '', // Valeur du champ email (adresse email)\n      valuePassword: '', // Valeur du champ password (mot de passe)\n\n      // Formulaire valide ou non (true ou false) [prénom, nom, email, mot de passe]\n      inputValid: [false, false, false, false],\n      validForm: true,   // Formulaire valide ou non (true ou false)\n      isLoading: false,  // Chargement du formulaire (true ou false) (pour afficher le loader)\n      inAction: false,   // Action en cours (true ou false) (pour afficher le loader)\n      error: ''          // Error message (si erreur)\n    }\n\n    this.userUrl = 'http://localhost:8080/api/user';  // Url de l'API pour les utilisateurs (inscription)\n    this.signUrl = 'http://localhost:8080/api/auth/sign'; // Url de l'API pour les connexions (connexion)\n    this.postLogin = this.postLogin.bind(this); // Appel de la fonction postLogin (connexion) via le this (this = Register)\n    this.OnChange = this.OnChange.bind(this); // Appel de la fonction OnChange (changement d'input) via le this (this = Register)\n  }\n\n\n  // Requête d'inscription de l'utilisateur (inscription)\n  async postLogin(event) {  // Appel de la fonction postLogin (connexion) via le this (this = Register)\n    event.preventDefault(); // Annulation de l'action par défaut du formulaire\n    this.setState({ validForm: true, inAction: true }); // Changement du formulaire en cours (true) et du loader en cours (true) (pour afficher le loader)\n    const { valueFirst, valueLast, valueEmail, valuePassword } = this.state; // Récupération des valeurs des champs du formulaire (prénom, nom, email, mot de passe)\n    const dataPost = { // Création de l'objet JSON pour la requête d'inscription (inscription)\n      firstname: valueFirst,  // Prénom de l'utilisateur (prénom)\n      lastname: valueLast,    // Nom de famille de l'utilisateur (nom de famille)\n      email: valueEmail,      // Adresse email de l'utilisateur (adresse email)\n      password: valuePassword // Mot de passe de l'utilisateur (mot de passe)\n    };\n\n    // Publier la demande d'inscription (inscription) à l'API (inscription) et récupérer la réponse (inscription) \n    await axios.post(this.signUrl, dataPost).then((res) => {\n      this.setToken(res.data.token); // Insertion du jeton dans la session storage du navigateur (pour la suite) (inscription)\n\n      const getUserUrl = this.userUrl + '?id=' + res.data.userId; // Création de l'url de la requête de récupération du profil de l'utilisateur (inscription)\n      axios.get(getUserUrl).then((user) => { // Publier la demande de récupération du profil de l'utilisateur (inscription) à l'API (inscription) et récupérer la réponse (inscription)\n        this.setState({ userLogged: user.data.user, inAction: false, curPage: 'Home' }); // Changement de la page en cours (Home) (inscription) et du loader en cours (false) (pour cacher le loader) (inscription)\n        App.ReloadApp(); // Rafraichissement de la page (inscription)\n      })\n        .catch((_error) => { // Si erreur (inscription)  \n          console.warn('ERROR'); // Affichage d'un message d'erreur (inscription)\n          // Changement de la page en cours (Home) (inscription) et du loader en cours (false) (pour cacher le loader) (inscription) et affichage du message d'erreur (inscription)\n          this.setState({ userLogged: null, validForm: false, inAction: false, error: 'Erreur interne!' });\n        });\n    })\n      .catch((err) => { // Si erreur (inscription)\n        console.error('Erreur de demande de connexion !'); // Affichage d'un message d'erreur (inscription)\n        console.log(err); // Affichage de l'erreur (inscription) (pour débug) \n        // Changement de la page en cours (Home) (inscription) et du loader en cours (false) (pour cacher le loader) (inscription) et affichage du message d'erreur (inscription)\n        this.setState({ userLogged: null, validForm: false, inAction: false, error: 'Adresse Email déjà existante!' });\n      });\n  }\n\n  // Changement de la valeur d'un champ du formulaire (changement d'input) \n  OnChange(event) {\n    const myCase = event.target.name; // Récupération du nom du champ (changement d'input)\n    switch (myCase) { // Switch sur le nom du champ (changement d'input) (prénom, nom, email, mot de passe)\n      case 'firstname': // Si le champ est prénom (changement d'input) (prénom)\n        this.checkForm(event.target); // Appel de la fonction checkForm (changement d'input) (prénom)\n        this.setState({ valueFirst: event.target.value }); // Changement de la valeur du champ (changement d'input) (prénom)\n        break; // Sortie de la condition (changement d'input) (prénom)\n\n      case 'lastname': // Si le champ est nom de famille (changement d'input) (nom de famille)\n        this.checkForm(event.target); // Appel de la fonction checkForm (changement d'input) (nom de famille)\n        this.setState({ valueLast: event.target.value }); // Changement de la valeur du champ (changement d'input) (nom de famille) \n        break; // Sortie de la condition (changement d'input) (nom de famille)\n      case 'email': // Si le champ est email (changement d'input) (email)\n        this.checkForm(event.target); // Appel de la fonction checkForm (changement d'input) (email)\n        this.setState({ valueEmail: event.target.value }); // Changement de la valeur du champ (changement d'input) (email)\n        break;  // Sortie de la condition (changement d'input) (email)\n\n      case 'password': // Si le champ est mot de passe (changement d'input) (mot de passe)\n        this.checkForm(event.target); // Appel de la fonction checkForm (changement d'input) (mot de passe)\n        this.setState({ valuePassword: event.target.value }); // Changement de la valeur du champ (changement d'input) (mot de passe)\n        break; // Sortie de la condition (changement d'input) (mot de passe)\n\n      default: // Si le champ n'est pas prénom, nom de famille, email ou mot de passe (changement d'input) (autre champ) \n        console.error('Rien ici!'); // Affichage d'un message d'erreur Rien ici (changement d'input) (autre champ)\n        break; // Sortie de la condition (changement d'input) (autre champ)\n    }\n  }\n\n\n  // Verification des inputs valides (changement d'input) (prénom, nom, email, mot de passe)\n  checkForm(target) {\n    const { inputValid } = this.state; // Récupération de l'état de l'input (changement d'input) (prénom, nom, email, mot de passe)\n    const inputName = target.name; // Récupération du nom du champ (changement d'input) (prénom, nom, email, mot de passe)\n    let inputs = [...inputValid]; // Création d'un nouveau tableau avec les valeurs de inputValid (changement d'input) (prénom, nom, email, mot de passe)\n    let pos = 0;  // Création d'une variable de position (changement d'input) (prénom, nom, email, mot de passe) (0)\n    switch (inputName) { // Switch sur le nom du champ (changement d'input) (prénom, nom, email, mot de passe)\n      default:  // Si le champ n'est pas prénom, nom de famille, email ou mot de passe (changement d'input) (autre champ)\n        console.error('Nom de champ inconnu!'); // Affichage d'un message d'erreur Nom de champ inconnu (changement d'input) (autre champ)\n        break; // Sortie de la condition (changement d'input) (autre champ)\n\n      case 'firstname': // Si le champ est prénom (changement d'input) (prénom)\n      case 'lastname': // Si le champ est nom de famille (changement d'input) (nom de famille)\n        pos = 0; // Changement de la valeur de la variable de position (changement d'input) (prénom, nom de famille) (0) \n        if (inputName === 'lastname') pos = 1; // Si le champ est nom de famille (changement d'input) (nom de famille) (1)  \n        if (target.value.length >= 2) { // Si la longueur du champ est supérieure ou égale à 2 (changement d'input) (prénom, nom de famille) (2)\n          target.className = \"valid\"; // Changement du style du champ (changement d'input) (prénom, nom de famille) (valid)\n          inputs[pos] = true; // Changement de la valeur de l'input (changement d'input) (prénom, nom de famille) (true)\n          this.setState({ inputValid: inputs }); // Changement de l'état de l'input (changement d'input) (prénom, nom de famille)\n        }\n        else {\n          target.className = \"error\";  // Changement du style du champ (changement d'input) (prénom, nom de famille) (error)\n          inputs[pos] = false; // Changement de la valeur de l'input (changement d'input) (prénom, nom de famille) (false)\n          this.setState({ inputValid: inputs }); // Changement de l'état de l'input (changement d'input) (prénom, nom de famille)\n        }\n        break; // Sortie de la condition (changement d'input) (prénom, nom de famille)\n\n      case 'email': // Si le champ est email (changement d'input) (email)\n        // Expression régulière pour vérifier si l'email est valide (changement d'input) (email) (regExp)\n        let regEmail = new RegExp(/^[a-zA-Z0-9.-]+@[a-zA-Z0-9.-]+(\\.[a-zA-Z]{2,})/g);\n        pos = 2; // Changement de la valeur de la variable de position (changement d'input) (email) (2) \n        if (!target.value.match(regEmail)) { // Si l'email n'est pas valide (changement d'input) (email) (match) (regExp)\n          target.className = \"error\"; // Changement du style du champ (changement d'input) (email) (error)\n          inputs[pos] = false; // Changement de la valeur de l'input (changement d'input) (email) (false)\n          this.setState({ inputValid: inputs }); // Changement de l'état de l'input (changement d'input) (email)\n        }\n        else {\n          target.className = \"valid\"; // Changement du style du champ (changement d'input) (email) (valid)\n          inputs[pos] = true; // Changement de la valeur de l'input (changement d'input) (email) (true)\n          this.setState({ inputValid: inputs }); // Changement de l'état de l'input (changement d'input) (email)\n        }\n        break; // Sortie de la condition (changement d'input) (email)\n\n      case 'password': // Si le champ est mot de passe (changement d'input) (mot de passe)\n        pos = 3; // Changement de la valeur de la variable de position (changement d'input) (mot de passe) (3)\n        if (target.value.length >= 4) { // Si la longueur du champ est supérieure ou égale à 4 (changement d'input) (mot de passe) (4)\n          target.className = \"valid\"; // Changement du style du champ (changement d'input) (mot de passe) (valid)\n          inputs[pos] = true; // Changement de la valeur de l'input (changement d'input) (mot de passe) (true)\n          this.setState({ inputValid: inputs }); // Changement de l'état de l'input (changement d'input) (mot de passe)\n        }\n        else {\n          target.className = \"error\"; // Changement du style du champ (changement d'input) (mot de passe) (error)\n          inputs[pos] = false; // Changement de la valeur de l'input (changement d'input) (mot de passe) (false)\n          this.setState({ inputValid: inputs }); // Changement de l'état de l'input (changement d'input) (mot de passe)\n        }\n        if (target.value.length === 0) { // Si la longueur du champ est égale à 0 (changement d'input) (mot de passe) (0)  \n          target.className = \"\"; // Changement du style du champ (changement d'input) (mot de passe) ()\n          inputs[pos] = true; // Changement de la valeur de l'input (changement d'input) (mot de passe) (true)\n          this.setState({ inputValid: inputs }); // Changement de l'état de l'input (changement d'input) (mot de passe)\n        };\n        break; // Sortie de la condition (changement d'input) (mot de passe)\n    }\n\n    if (inputs.every(element => element === true)) // Si tous les inputs sont valides (changement d'input) (tous les inputs) (every)\n      this.setState({ validForm: false }); // Changement de l'état du formulaire (changement d'input) (tous les inputs) (false)\n    else\n      this.setState({ validForm: true }); // Changement de l'état du formulaire (changement d'input) (tous les inputs) (true)\n  }\n\n  // Fonction qui permet de stocker le jeton dans la session (changement d'input) (jeton) (sessionStorage)\n  setToken(userToken) {\n    sessionStorage.setItem('token', JSON.stringify(userToken)); // Stocke le jeton dans la session (changement d'input) (jeton) (sessionStorage)\n  }\n\n  render() { // Fonction qui permet de rendre le composant (rendu)\n    const { isLoading, validForm, error } = this.state; // Déclaration des variables (rendu) (isLoading, validForm, error) \n    return (<>      {/* Début du rendu (rendu) */}\n      {/* Formulaire d'inscription pour devenir membre (rendu) (isLoading) */}\n      {!isLoading ? (<>\n        <div className='login'> {/* Début de la div (rendu) (isLoading) */}\n          <h2><i className='fa-solid fa-door-open'></i> Inscrivez-vous !</h2> {/* Titre (rendu) (isLoading) */}\n          {error || error !== '' ? <p className=\"error\">{error}</p> : null} {/* Message d'erreur (rendu) (isLoading) (error) */}\n          <form onSubmit={this.postLogin} disabled={validForm}> {/* Début du formulaire (rendu) (isLoading) (validForm) */}\n            <label htmlFor=\"Prenom\">Prénom</label> {/* Label (rendu) (isLoading) (validForm) (Prenom) */}\n            <input id='Prenom' name='firstname' type='text' placeholder='Prénom' // Input (rendu) (isLoading) (validForm) (Prenom)\n              label='Prénom' onChange={this.OnChange} required />  {/* Input (rendu) (isLoading) (validForm) (Prenom) (onChange) (required) */}\n\n            <label htmlFor=\"Nom\">Nom</label>  {/* Label (rendu) (isLoading) (validForm) (Nom) */}\n            <input id='Nom' name='lastname' type='text' placeholder='Nom'  // Input (rendu) (isLoading) (validForm) (Nom)\n              label='Nom' onChange={this.OnChange} required /> {/* Input (rendu) (isLoading) (validForm) (Nom) (onChange) (required) */}\n\n            <label htmlFor=\"Email\">Email</label> {/* Label (rendu) (isLoading) (validForm) (Email) */}\n            <input id='Email' name='email' type='email' placeholder='Ex : example@groupomania.com' // Input (rendu) (isLoading) (validForm) (Email)\n              label='Adresse email' onChange={this.OnChange} required /> {/* Input (rendu) (isLoading) (validForm) (Email) (onChange) (required) */}\n\n            <label htmlFor=\"Password\">Mot de passe</label> {/* Label (rendu) (isLoading) (validForm) (Password) */}\n            <input id='Password' name='password' type='password' placeholder='mot de passe' // Input (rendu) (isLoading) (validForm) (Password)\n              label='Mot de passe' onChange={this.OnChange} required />\n            <input type='submit' disabled={validForm} label='Inscription' value='Inscription' /> {/* Input (rendu) (isLoading) (validForm) (Password) (onChange) (required) */}\n          </form>\n        </div>\n\n        <div className=\"sign\"> {/* Début de la div (rendu) (isLoading) */}\n          <h3>Vous êtes déjà membre ?</h3> {/* Titre (rendu) (isLoading) */}\n          <button value={'Login'} onClick={this.props.navigateTo} >Connexion</button> {/* Bouton (rendu) (isLoading) (Login) */}\n        </div>\n      </>) : (<></>)}\n\n    </>)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}